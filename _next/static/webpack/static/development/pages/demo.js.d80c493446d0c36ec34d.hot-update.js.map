{"version":3,"file":"static/webpack/static/development/pages/demo.js.d80c493446d0c36ec34d.hot-update.js","sources":["webpack:///./pages/demo.js"],"sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\nimport Formatic from '@/src/formatic';\n\nimport Page from '@/docs/components/Page';\nimport Sections from '@/docs/components/Sections';\nimport Section from '@/docs/components/Section';\nimport Button from '@/docs/components/Button';\n\nimport examples from '@/demo/examples';\n\nimport customPlugin from '@/demo/examples/custom-plugin';\nimport cssPlugin from '@/src/plugins/css-plugin';\n\nconst Form = React.createFactory(Formatic);\n\n// Draws a hint box around each component.\nconst HintBox = props => (\n  <div\n    style={{\n      padding: '1px',\n      margin: '1px',\n      border: '1px solid black',\n      display: 'inline-block',\n    }}\n  >\n    <span style={{ fontStyle: 'italic', fontSize: '12px' }}>{props.name}</span>\n    {props.children}\n  </div>\n);\n\n// Inject a HintBox into each createElement_ hook to show hints\n// for plugin methods.\nconst hintPlugin = config => {\n  const prevConfig = _.extend({}, config);\n  return Object.keys(config).reduce(\n    (newConfig, key) => {\n      if (key.startsWith('createElement_')) {\n        newConfig[key] = props => (\n          <HintBox key={props.key} name={key}>\n            {prevConfig[key](props)}\n          </HintBox>\n        );\n      }\n      return newConfig;\n    },\n    {\n      renderTag: (tag, tagProps, metaProps, ...children) => {\n        return (\n          <HintBox\n            name={`renderTag:(${tag}:${metaProps.typeName}:${\n              metaProps.elementName\n            })`}\n          >\n            {prevConfig.renderTag(tag, tagProps, metaProps, ...children)}\n          </HintBox>\n        );\n      },\n    }\n  );\n};\n\nconst dynamicReplaceChoices = {};\n\nconst loadDynamicReplaceChoices = (field, onLoaded) => {\n  if (field.dynamicReplaceChoices && !dynamicReplaceChoices[field.key]) {\n    console.info(`loading choices for ${field.key}...`);\n    setTimeout(() => {\n      dynamicReplaceChoices[field.key] = field.dynamicReplaceChoices;\n      console.info('loaded:', field.dynamicReplaceChoices);\n      onLoaded();\n    }, 2000);\n  }\n};\n\n// Simulate dynamic replace choices.\nconst fakeDynamicPlugin = ({ fieldReplaceChoices }) => ({\n  fieldReplaceChoices: field => {\n    if (field.dynamicReplaceChoices) {\n      if (dynamicReplaceChoices[field.key]) {\n        return dynamicReplaceChoices[field.key];\n      }\n      return [\n        {\n          value: '///loading///',\n        },\n      ];\n    }\n    return fieldReplaceChoices(field);\n  },\n});\n\nconst config = Formatic.createConfig(\n  cssPlugin,\n  Formatic.plugins.reference,\n  Formatic.plugins.meta,\n  customPlugin,\n  fakeDynamicPlugin\n);\n\nconst hintConfig = Formatic.createConfig(\n  cssPlugin,\n  Formatic.plugins.reference,\n  Formatic.plugins.meta,\n  customPlugin,\n  hintPlugin,\n  fakeDynamicPlugin\n);\n\nconst convertTitleToId = title => title.toLowerCase().replace(/ /g, '-');\n\nconst DisplayFormValue = props => (\n  <div>\n    <h5>{props.title} Form State:</h5>\n    <pre>{JSON.stringify(props.value, null, 2)}</pre>\n  </div>\n);\n\nconst generateAliases = aliases =>\n  aliases\n    .map((alias, idx) => (\n      <span className=\"code\" key={idx}>\n        {alias}\n      </span>\n    ))\n    .reduce(\n      (acc, elem) => (acc === null ? [elem] : [...acc, ', ', elem]),\n      null\n    );\n\nclass FormDemo extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      formState: config.createRootValue(props),\n      fields: props.fields,\n      hints: {},\n    };\n  }\n\n  onChange(newValue, info) {\n    console.info('onChange:', newValue);\n    console.info('Field Info:', info);\n\n    this.setState({\n      formState: newValue,\n    });\n  }\n\n  onChangeFields(newValue) {\n    this.setState({\n      fields: newValue.source,\n    });\n  }\n\n  onChangeHint(id) {\n    const hints = _.extend({}, this.state.hints);\n    hints[id] = !hints[id];\n    this.setState({\n      hints,\n    });\n  }\n\n  onEvent(eventName, event) {\n    console.info(eventName, event.path, event.field);\n  }\n\n  onCustomEvent(eventName, info) {\n    console.info(eventName, info);\n  }\n\n  render() {\n    const { title, notes, aliases } = this.props;\n\n    const aliasContent = !aliases ? null : (\n      <p>Aliases: {generateAliases(aliases)}</p>\n    );\n\n    const typeName = convertTitleToId(title);\n\n    const typeContent =\n      typeName === 'unknown-field' ? null : (\n        <p>\n          Type: <span className=\"code\">{convertTitleToId(title)}</span>\n        </p>\n      );\n\n    const id = convertTitleToId(title);\n\n    return (\n      <div id={id}>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            {/* <h3>\n              {title}\n              <a className=\"form-link\" href={`#${convertTitleToId(title)}`}>\n                <span className=\"glyphicon glyphicon-link\" />\n              </a>\n            </h3> */}\n            <hr />\n            {typeContent}\n            {aliasContent}\n            <p>\n              <Button onClick={() => this.onChangeHint(id)}>\n                Toggle Plugin Hints\n              </Button>\n            </p>\n            <p>{notes}</p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-8\">\n            <div className=\"form-example\">\n              <Form\n                config={this.state.hints[id] ? hintConfig : config}\n                fields={this.state.fields}\n                onBlur={e => this.onEvent('onBlur', e)}\n                onChange={this.onChange.bind(this)}\n                onClearCurrentChoice={info =>\n                  this.onCustomEvent('onClearCurrentChoice', info)\n                }\n                onCloseReplacements={info =>\n                  this.onCustomEvent('onCloseReplacements', info)\n                }\n                onFocus={e => this.onEvent('onFocus', e)}\n                onOpenReplacements={info => {\n                  loadDynamicReplaceChoices(info.field, () => {\n                    this.setState({});\n                  });\n                  this.onCustomEvent('onOpenReplacements', info);\n                }}\n                onOrderGroceries={info =>\n                  this.onCustomEvent('onOrderGroceries', info)\n                }\n                readOnly={false}\n                value={this.state.formState}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-4\">\n            <DisplayFormValue title={title} value={this.state.formState} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <Form\n              config={config}\n              fields={{\n                type: 'fieldset',\n                collapsed: true,\n                label: 'Example JSON',\n                fields: [\n                  {\n                    key: 'source',\n                    type: 'json',\n                    default: this.state.fields,\n                  },\n                ],\n              }}\n              onChange={this.onChangeFields.bind(this)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst sortedExamples = _.sortBy(examples, ['title']);\n\nconst DemoPage = () => (\n  <Page pageKey=\"demo\">\n    <Sections>\n      {sortedExamples.map((form, idx) => (\n        <Section key={form.title} title={form.title}>\n          <FormDemo key={idx} {...form} />\n        </Section>\n      ))}\n    </Sections>\n  </Page>\n);\n\nexport default DemoPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AATA;AAeA;AACA;AACA;AADA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AADA;AAQA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAIA;AACA;AAAA;AACA;AAbA;AAAA;AACA;AAeA;AAQA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAMA;AAAA;AARA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAIA;AAEA;AAGA;AAAA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAtBA;AA0BA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AALA;AAYA;AAdA;AAoBA;;;;AAxIA;AACA;AA0IA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAFA;AAHA;AACA;AAWA;;;;A","sourceRoot":""}