{"version":3,"file":"static/webpack/static/development/pages/plugins.js.cf3315cc3ec62259a63e.hot-update.js","sources":["webpack:///./pages/plugins.js"],"sourcesContent":["import React from 'react';\nimport 'isomorphic-unfetch';\n\nimport Page from '../docs/components/Page';\nimport Section from '../docs/components/Section';\nimport CodeBlock from '../docs/components/CodeBlock';\nimport Sections from '../docs/components/Sections';\nimport Code from '../docs/components/Code';\n\nimport { fetchSnippets } from '../docs/utils';\nimport { loadSnippets } from '../docs/utils';\n\nconst Plugins = props => (\n  <Page pageKey=\"plugins\">\n    <Sections>\n      <Section title=\"Config\">\n        <p>\n          Plugins are simply functions that help to create a configuration\n          object that is passed into Formatic, so first let's talk about the\n          config.\n        </p>\n        <p>\n          Almost all of Formatic's behavior is passed in via the{' '}\n          <Code>config</Code> property. If you pass in no config, then Formatic\n          uses it's own{' '}\n          <a href=\"https://github.com/zapier/formatic/blob/master/lib/default-config.js\">\n            default config plugin\n          </a>{' '}\n          to create a config for you. To change Formatic's behavior, you simply\n          pass in a config object with different methods.\n        </p>\n        <p>Passing in no config:</p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-no-config']}\n        </CodeBlock>\n        <p>Is equivalent to this:</p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-default-config']}\n        </CodeBlock>\n      </Section>\n\n      <Section title=\"A Simple Plugin Example\">\n        <p>\n          Plugins are just functions that help in the creation of a config.\n          Here's a simple plugin that will will use the key instead of the label\n          of a field if the label is not present.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-fieldLabel']}\n        </CodeBlock>\n        <p>\n          Note that plugin functions receive the config as a parameter, so you\n          can delegate to other methods on the config. Let's \"humanize\" our key\n          by calling the <Code>config.humanize</Code> method on the config.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-humanize']}\n        </CodeBlock>\n        <p>\n          Also note that at the point in time config is passed in, it's had all\n          previous plugins applied. So you can save any existing methods for\n          wrapping. Here, we'll delegate back to the original{' '}\n          <Code>fieldLabel</Code> method.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-delegate']}\n        </CodeBlock>\n      </Section>\n\n      <Section title=\"Using Plugins\">\n        <p>\n          To use a plugin, just pass it in to <Code>Formatic.createConfig</Code>\n          .\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-using']}\n        </CodeBlock>\n        <p>\n          You can pass in multiple plugins. If multiple plugins define the same\n          method, the config will get the method from the last plugin. As shown\n          above though, each plugin's method can delegate to an earlier plugin's\n          method.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['plugin-using-multiple']}\n        </CodeBlock>\n      </Section>\n\n      <Section title=\"Adding Field Types\">\n        <p>\n          To add a new field type, you can use the `FieldContainer` component to\n          create the field component, and you point to it with a plugin.\n        </p>\n        <CodeBlock language=\"jsx\">\n          {props.snippets['plugin-field-type']}\n        </CodeBlock>\n      </Section>\n\n      {/* <Section title=\"Basic Usage\">\n        <p>\n          Basic usage of Formatic is pretty simple. Formatic is just a React\n          component. Pass in the fields as props to render your fields.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example']}\n        </CodeBlock>\n        <p>That example gives us this form:</p>\n        <Example>\n          <Formatic fields={basicExampleFields} />\n        </Example>\n        <p>You can also pass a value for the fields.</p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-with-value']}\n        </CodeBlock>\n        <p>\n          Used this way, Formatic is a controlled component. So if you try to\n          edit the values in this form, you'll notice you can't.\n        </p>\n        <Example>\n          <Formatic fields={basicExampleFields} value={basicExampleValue} />\n        </Example>\n        <p>\n          That's because we're always setting it to a fixed value. We need to\n          use the `onChange` handler to keep the value in sync with the changes,\n          just like with an `input` element.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-with-on-change']}\n        </CodeBlock>\n        <p>\n          Now above, when we didn't supply a value, we were using Formatic as an\n          uncontrolled component. You can also pass a `defaultValue` and use\n          Formatic as an uncontrolled component.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-uncontrolled']}\n        </CodeBlock>\n      </Section> */}\n    </Sections>\n  </Page>\n);\n\nconst snippetKeys = [\n  'plugin-no-config',\n  'plugin-default-config',\n  'plugin-fieldLabel',\n  'plugin-humanize',\n  'plugin-delegate',\n  'plugin-using',\n  'plugin-using-multiple',\n  'plugin-field-type',\n];\n\nPlugins.getInitialProps = async ({ req }) => {\n  return { snippets: loadSnippets(snippetKeys) };\n};\n\nexport default Plugins;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAUA;AAAA;AAOA;AAAA;AAIA;AAAA;AAKA;AAAA;AAMA;AAAA;AAQA;AAAA;AASA;AAAA;AAKA;AAAA;AAKA;AAAA;AASA;AAAA;AAKA;AAAA;AAKA;AAAA;AAjFA;AACA;AAiIA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}