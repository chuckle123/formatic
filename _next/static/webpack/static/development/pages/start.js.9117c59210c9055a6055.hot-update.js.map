{"version":3,"file":"static/webpack/static/development/pages/start.js.9117c59210c9055a6055.hot-update.js","sources":["webpack:///./docs/components/Container.js","webpack:///./docs/components/Example.js","webpack:///./docs/components/Footer.js","webpack:///./docs/components/Header.js","webpack:///./docs/components/Link.js","webpack:///./docs/components/NavMenu.js","webpack:///./docs/components/Page.js","webpack:///./docs/components/Section.js","webpack:///./docs/components/Sections.js","webpack:///./docs/components/SubSection.js","webpack:///./pages/start.js","webpack:///./src/components/field-container.js","webpack:///./src/components/fields/array.js","webpack:///./src/components/fields/assoc-list.js","webpack:///./src/components/fields/boolean.js","webpack:///./src/components/fields/checkbox-array.js","webpack:///./src/components/fields/checkbox-boolean.js","webpack:///./src/components/fields/code.js","webpack:///./src/components/fields/copy.js","webpack:///./src/components/fields/fields.js","webpack:///./src/components/fields/grouped-fields.js","webpack:///./src/components/fields/json.js","webpack:///./src/components/fields/object.js","webpack:///./src/components/fields/password.js","webpack:///./src/components/fields/pretty-boolean.js","webpack:///./src/components/fields/pretty-select.js","webpack:///./src/components/fields/pretty-text.js","webpack:///./src/components/fields/select.js","webpack:///./src/components/fields/single-line-string.js","webpack:///./src/components/fields/string.js","webpack:///./src/components/fields/unknown.js","webpack:///./src/components/helpers/add-item.js","webpack:///./src/components/helpers/array-control.js","webpack:///./src/components/helpers/array-item-control.js","webpack:///./src/components/helpers/array-item-value.js","webpack:///./src/components/helpers/array-item.js","webpack:///./src/components/helpers/assoc-list-control.js","webpack:///./src/components/helpers/assoc-list-item-control.js","webpack:///./src/components/helpers/assoc-list-item-key.js","webpack:///./src/components/helpers/assoc-list-item-value.js","webpack:///./src/components/helpers/assoc-list-item.js","webpack:///./src/components/helpers/choice-section-header.js","webpack:///./src/components/helpers/choice.js","webpack:///./src/components/helpers/choices-item.js","webpack:///./src/components/helpers/choices-search.js","webpack:///./src/components/helpers/choices.js","webpack:///./src/components/helpers/field-template-choices.js","webpack:///./src/components/helpers/field.js","webpack:///./src/components/helpers/help.js","webpack:///./src/components/helpers/insert-button.js","webpack:///./src/components/helpers/label.js","webpack:///./src/components/helpers/loading-choice.js","webpack:///./src/components/helpers/loading-choices.js","webpack:///./src/components/helpers/move-item-back.js","webpack:///./src/components/helpers/move-item-forward.js","webpack:///./src/components/helpers/pretty-select-input.js","webpack:///./src/components/helpers/pretty-select-value.js","webpack:///./src/components/helpers/pretty-tag.js","webpack:///./src/components/helpers/pretty-text-input.js","webpack:///./src/components/helpers/remove-item.js","webpack:///./src/components/helpers/required-label.js","webpack:///./src/components/helpers/sample.js","webpack:///./src/components/helpers/select-value.js","webpack:///./src/components/helpers/tag-translator.js","webpack:///./src/default-config.js","webpack:///./src/formatic.js","webpack:///./src/jsx.js","webpack:///./src/mixins/click-outside.js","webpack:///./src/mixins/resize.js","webpack:///./src/mixins/shared.js","webpack:///./src/plugins/bootstrap.js","webpack:///./src/plugins/element-classes.js","webpack:///./src/plugins/reference.js","webpack:///./src/utils.js"],"sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport { getMediaQueriesForWidths } from '../styles/Media';\n\nconst styles = {\n  container: css({\n    paddingRight: 15,\n    paddingLeft: 15,\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    ...getMediaQueriesForWidths(\n      {},\n      width => ({\n        width: width - 30,\n      }),\n      width => ({\n        width: width - 30,\n      }),\n      width => ({\n        width: width - 30,\n      })\n    ),\n  }),\n};\n\nconst Container = props => <div css={styles.container}>{props.children}</div>;\n\nexport default Container;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport Colors from '../styles/Colors';\n\nconst styles = {\n  example: css({\n    border: `1px solid ${Colors.neutral[4]}`,\n    padding: 20,\n    borderRadius: 3,\n  }),\n};\n\nconst Example = props => <div css={styles.example}>{props.children}</div>;\n\nexport default Example;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport Container from './Container';\nimport Colors from '../styles/Colors';\n\nconst styles = {\n  footer: css({\n    marginTop: 100,\n    borderTop: `1px solid ${Colors.neutral[5]}`,\n    paddingTop: 40,\n    paddingBottom: 40,\n  }),\n  content: css({\n    textAlign: 'center',\n  }),\n};\n\nconst Header = () => (\n  <footer css={styles.footer}>\n    <Container>\n      <p css={styles.content}>\n        Code licensed by{' '}\n        <a href=\"https://github.com/zapier/formatic/blob/master/LICENSE\">\n          Zapier Inc.\n        </a>\n      </p>\n    </Container>\n  </footer>\n);\n\nexport default Header;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport Container from './Container';\nimport Colors from '../styles/Colors';\nimport Typography from '../styles/Typography';\nimport { getMediaQueriesForWidths } from '../styles/Media';\n\nconst styles = {\n  header: css({\n    borderBottom: `1px solid ${Colors.neutral[5]}`,\n    marginBottom: 40,\n    ...getMediaQueriesForWidths(\n      {\n        ...Typography['sub-head'],\n        paddingTop: 20,\n        paddingBottom: 20,\n      },\n      {\n        ...Typography['main-head'],\n        paddingTop: 60,\n        paddingBottom: 60,\n      }\n    ),\n  }),\n  leadHeader: css({}),\n  logo: css({\n    display: 'block',\n    margin: '0 auto 30px',\n    width: 200,\n    height: 200,\n  }),\n  lead: css({\n    textAlign: 'center',\n    ...Typography['main-head'],\n  }),\n  title: css({\n    ...getMediaQueriesForWidths(\n      {\n        ...Typography['main-head'],\n      },\n      {\n        ...Typography['mega-head'],\n      }\n    ),\n  }),\n  subTitle: css({}),\n};\n\nconst Header = props =>\n  !props.title ? (\n    <div css={[styles.header, styles.leadHeader]}>\n      <Container>\n        <img css={styles.logo} src=\"static/images/logo.png\" alt=\"Formatic\" />\n        <p css={styles.lead}>Automatic Forms for React</p>\n      </Container>\n    </div>\n  ) : (\n    <div css={styles.header}>\n      <Container>\n        <h1 css={styles.title}>{props.title}</h1>\n        <p css={styles.subTitle}>{props.subTitle}</p>\n      </Container>\n    </div>\n  );\n\nexport default Header;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport NextLink from 'next/link';\n\nimport Colors from '../styles/Colors';\nimport { prefixHref } from '../utils';\n\nconst styles = {\n  link: css({\n    color: Colors.main[1],\n  }),\n  navLink: css({\n    color: Colors.neutral[2],\n    textDecoration: 'none',\n    '&:focus, &:hover': {\n      textDecoration: 'none',\n      color: Colors.main[1],\n    },\n  }),\n  navLinkIsActive: css({\n    color: Colors.neutral[1],\n  }),\n};\n\nexport const RawLink = props => {\n  const { href, ...linkProps } = props;\n\n  return (\n    <NextLink href={href} as={prefixHref(href)} passHref={true}>\n      <a {...linkProps} />\n    </NextLink>\n  );\n};\n\nconst Link = props => {\n  const { isNav, isActive, href, ...linkProps } = props;\n  const linkCss = css(\n    styles.link,\n    isNav && styles.navLink,\n    isNav && isActive && styles.navLinkIsActive\n  );\n  return (\n    <NextLink href={href} as={prefixHref(href)} passHref={true}>\n      <a css={linkCss} {...linkProps} />\n    </NextLink>\n  );\n};\n\nexport const NavLink = props => <Link isNav={true} {...props} />;\n\nexport default Link;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { Toggle } from 'react-powerplug';\n\nimport { RawLink, NavLink } from './Link';\nimport Container from './Container';\nimport Icon from './Icon';\nimport Colors from '../styles/Colors';\nimport { getMediaQueriesForWidths } from '../styles/Media';\n\nimport MenuIcon from '../../static/icons/menu.svg';\nimport DeleteIcon from '../../static/icons/delete.svg';\n\nconst styles = {\n  navWrapper: css({\n    borderBottom: `1px solid ${Colors.neutral[4]}`,\n  }),\n  nav: css({\n    display: 'flex',\n    fontSize: 15,\n    fontWeight: 600,\n    color: Colors.neutral[0],\n  }),\n  brand: css({\n    display: 'inline-block',\n    padding: 10,\n    fontSize: 18,\n    paddingLeft: 0,\n    ...getMediaQueriesForWidths(\n      {\n        flex: 1,\n      },\n      {\n        flex: 'initial',\n      }\n    ),\n  }),\n  brandLink: css({\n    color: Colors.brand[1],\n    textDecoration: 'none',\n    '&:focus, &:hover': {\n      textDecoration: 'none',\n      color: Colors.brand[1],\n    },\n  }),\n  items: css({\n    padding: 0,\n    margin: 0,\n    ...getMediaQueriesForWidths(\n      {\n        display: 'none',\n      },\n      {\n        display: 'flex',\n      }\n    ),\n  }),\n  menuItemsActive: css({\n    width: '100%',\n    backgroundColor: 'white',\n    position: 'absolute',\n    borderBottom: `1px solid ${Colors.neutral[4]}`,\n    paddingLeft: 5,\n    ...getMediaQueriesForWidths(\n      {\n        display: 'block',\n      },\n      {\n        display: 'none',\n      }\n    ),\n  }),\n  menuItemsNotActive: css({\n    display: 'none',\n  }),\n  item: css({\n    padding: 10,\n    borderBottom: `solid 3px rgb(0, 0, 0, 0)`,\n    ...getMediaQueriesForWidths(\n      {\n        display: 'block',\n      },\n      {\n        display: 'inline-block',\n      }\n    ),\n  }),\n  itemIsCurrent: css({\n    ...getMediaQueriesForWidths(\n      {},\n      {\n        borderBottom: `solid 3px ${Colors.main[1]}`,\n      }\n    ),\n  }),\n  toggle: css({\n    borderWidth: 0,\n    backgroundColor: 'white',\n    ...getMediaQueriesForWidths(\n      {},\n      {\n        display: 'none',\n      }\n    ),\n  }),\n};\n\nconst NavItem = props => {\n  const title = props.navTitle || props.title;\n  const target = /^https?:/.test(props.url) ? title : undefined;\n  return (\n    <li css={[styles.item, props.isCurrent && styles.itemIsCurrent]}>\n      <NavLink target={target} href={props.url} isActive={props.isCurrent}>\n        {props.navTitle || props.title}\n      </NavLink>\n    </li>\n  );\n};\n\nconst NavMenu = props => (\n  <Toggle>\n    {menuToggle => (\n      <div>\n        <div css={styles.navWrapper}>\n          <Container>\n            <nav css={styles.nav}>\n              <div css={styles.brand}>\n                <RawLink href=\"/\" css={styles.brandLink}>\n                  Formatic\n                </RawLink>\n              </div>\n              <ul css={styles.items}>\n                {Object.keys(props.pages).map(pageKey => (\n                  <NavItem\n                    key={pageKey}\n                    {...props.pages[pageKey]}\n                    isCurrent={props.pageKey === pageKey}\n                  />\n                ))}\n              </ul>\n              <button css={styles.toggle} onClick={menuToggle.toggle}>\n                {menuToggle.on ? (\n                  <Icon svg={DeleteIcon} />\n                ) : (\n                  <Icon svg={MenuIcon} />\n                )}\n              </button>\n            </nav>\n          </Container>\n        </div>\n        <ul\n          css={[\n            styles.items,\n            styles.menuItemsActive,\n            !menuToggle.on && styles.menuItemsNotActive,\n          ]}\n        >\n          {Object.keys(props.pages).map(pageKey => (\n            <NavItem\n              key={pageKey}\n              {...props.pages[pageKey]}\n              isCurrent={props.pageKey === pageKey}\n            />\n          ))}\n        </ul>\n      </div>\n    )}\n  </Toggle>\n);\n\nexport default NavMenu;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Layout from './Layout';\n\nimport Typography from '../styles/Typography';\n\nimport 'sanitize.css';\nimport 'codemirror/lib/codemirror.css';\nimport '../../static/css/app.css';\nimport '../../static/css/formatic.css';\n\nconst pages = {\n  start: {\n    url: '/start',\n    title: 'Getting Started',\n    subTitle: 'Installing and using Formatic',\n  },\n  demo: {\n    url: '/demo',\n    title: 'Field Types',\n    subTitle: 'The whole kitchen sink',\n  },\n  plugins: {\n    url: '/plugins',\n    navTitle: 'Plugins',\n    title: 'Extending Formatic',\n  },\n  github: {\n    url: 'http://github.com/zapier/formatic',\n    title: 'GitHub',\n  },\n};\n\nconst styles = {\n  body: css({\n    ...Typography['body-large'],\n  }),\n};\n\nconst Page = props => (\n  <Layout pages={pages} pageKey={props.pageKey}>\n    <div css={styles.body}>{props.children}</div>\n  </Layout>\n);\n\nexport default Page;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport Icon from './Icon';\n\nimport { dashify } from '../utils';\nimport Typography from '../styles/Typography';\n\nimport LinkIcon from '../../static/icons/link.svg';\n\nconst styles = {\n  section: css({}),\n  sectionHead: css({\n    ...Typography['main-head'],\n  }),\n  link: css({\n    paddingLeft: 5,\n  }),\n};\n\nconst Section = props => (\n  <div css={styles.section}>\n    <h2 css={styles.sectionHead}>\n      {props.title}\n      <a css={styles.link} href={`#${dashify(props.title)}`}>\n        <Icon svg={LinkIcon} />\n      </a>\n    </h2>\n    <div>{props.children}</div>\n  </div>\n);\n\nexport default Section;\n","/** @jsx jsx */\nimport * as React from 'react';\nimport { jsx, css } from '@emotion/core';\n\nimport { dashify } from '../utils';\nimport { getMediaQueriesForWidths } from '../styles/Media';\n\nconst styles = {\n  wrapper: css({\n    display: 'flex',\n    ...getMediaQueriesForWidths(\n      {\n        flexDirection: 'column-reverse',\n      },\n      {\n        flexDirection: 'row',\n      }\n    ),\n  }),\n  toc: css({\n    ...getMediaQueriesForWidths(\n      {},\n      {\n        top: 0,\n        position: 'sticky',\n        height: '90vh',\n        width: '25%',\n        overflowY: 'scroll',\n      }\n    ),\n  }),\n  content: css({\n    ...getMediaQueriesForWidths(\n      {},\n      {\n        width: '75%',\n      }\n    ),\n  }),\n};\n\nconst Sections = props => (\n  <div css={styles.wrapper}>\n    <div css={styles.content}>\n      {React.Children.map(props.children, child => (\n        <>\n          <a name={dashify(child.props.title)} />\n          {child}\n        </>\n      ))}\n    </div>\n    <div css={styles.toc}>\n      <ul>\n        {React.Children.map(props.children, child => (\n          <li>\n            <a href={`#${dashify(child.props.title)}`}>{child.props.title}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nexport default Sections;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nimport Typography from '../styles/Typography';\n\nconst styles = {\n  subSection: css({}),\n  subSectionHead: css({\n    ...Typography['sub-head'],\n  }),\n};\n\nconst SubSection = props => (\n  <div css={styles.subSection}>\n    <h3 css={styles.subSectionHead}>{props.title}</h3>\n    <div>{props.children}</div>\n  </div>\n);\n\nexport default SubSection;\n","import React from 'react';\nimport 'isomorphic-unfetch';\n\nimport Formatic from '../src/formatic';\nimport Page from '../docs/components/Page';\nimport Section from '../docs/components/Section';\nimport SubSection from '../docs/components/SubSection';\nimport CodeBlock from '../docs/components/CodeBlock';\nimport Example from '../docs/components/Example';\nimport Sections from '../docs/components/Sections';\n\nimport { loadSnippets } from '../docs/utils';\n\nconst basicExampleFields = [\n  {\n    type: 'single-line-string',\n    key: 'firstName',\n    label: 'First Name',\n  },\n  {\n    type: 'single-line-string',\n    key: 'lastName',\n    label: 'Last Name',\n  },\n];\n\nconst basicExampleValue = {\n  firstName: 'Joe',\n  lastName: 'Foo',\n};\n\nconst Start = props => (\n  <Page pageKey=\"start\">\n    <Sections>\n      <Section title=\"Install\">\n        <SubSection title=\"npm\">\n          <CodeBlock language=\"bash\">{`npm install formatic --save`}</CodeBlock>\n        </SubSection>\n        <SubSection title=\"yarn\">\n          <CodeBlock language=\"bash\">{`yarn add formatic`}</CodeBlock>\n        </SubSection>\n      </Section>\n      <Section title=\"Basic Usage\">\n        <p>\n          Basic usage of Formatic is pretty simple. Formatic is just a React\n          component. Pass in the fields as props to render your fields.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example']}\n        </CodeBlock>\n        <p>That example gives us this form:</p>\n        <Example>\n          <Formatic fields={basicExampleFields} />\n        </Example>\n        <p>You can also pass a value for the fields.</p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-with-value']}\n        </CodeBlock>\n        <p>\n          Used this way, Formatic is a controlled component. So if you try to\n          edit the values in this form, you'll notice you can't.\n        </p>\n        <Example>\n          <Formatic fields={basicExampleFields} value={basicExampleValue} />\n        </Example>\n        <p>\n          That's because we're always setting it to a fixed value. We need to\n          use the `onChange` handler to keep the value in sync with the changes,\n          just like with an `input` element.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-with-on-change']}\n        </CodeBlock>\n        <p>\n          Now above, when we didn't supply a value, we were using Formatic as an\n          uncontrolled component. You can also pass a `defaultValue` and use\n          Formatic as an uncontrolled component.\n        </p>\n        <CodeBlock language=\"javascript\">\n          {props.snippets['basic-example-uncontrolled']}\n        </CodeBlock>\n      </Section>\n    </Sections>\n  </Page>\n);\n\nconst snippetKeys = [\n  'basic-example',\n  'basic-example-with-value',\n  'basic-example-with-on-change',\n  'basic-example-uncontrolled',\n];\n\nStart.getInitialProps = async () => {\n  return { snippets: loadSnippets(snippetKeys) };\n};\n\nexport default Start;\n","import React from 'react';\n\nimport fieldMixin from '../mixins/field';\n\n// A better way to add new field types vs the old mixins approach. This\n// component abstracts away our ugly old mixins into a component with a render\n// callback. That way, we can eventually deprecate the mixins and do a much\n// grander refactor.\nclass FieldContainer extends React.Component {\n  onChangeValue = fieldMixin.onChangeValue.bind(this);\n  onBubbleValue = fieldMixin.onBubbleValue.bind(this);\n  onStartAction = fieldMixin.onStartAction.bind(this);\n  onFocusAction = fieldMixin.onFocusAction.bind(this);\n  onBlurAction = fieldMixin.onBlurAction.bind(this);\n  onBubbleAction = fieldMixin.onBubbleAction.bind(this);\n  isReadOnly = fieldMixin.isReadOnly.bind(this);\n  constructor() {\n    super();\n    this.methods = {\n      onChangeValue: this.onChangeValue,\n      onBubbleValue: this.onBubbleValue,\n      onStartAction: this.onStartAction,\n      onFocus: this.onFocusAction,\n      onBlur: this.onBlurAction,\n      onBubbleAction: this.onBubbleAction,\n      isReadOnly: this.onReadOnly,\n    };\n  }\n  render() {\n    return this.props.children({\n      ...this.methods,\n      ...this.props,\n    });\n  }\n}\n\nexport default FieldContainer;\n","// # array component\n\n/*\nRender a field to edit array values.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Array',\n\n  mixins: [FieldMixin],\n\n  nextLookupId: 0,\n\n  getInitialState: function() {\n    // Need to create artificial keys for the array. Indexes are not good keys,\n    // since they change. So, map each position to an artificial key\n    const lookups = [];\n\n    let items = this.props.field.value;\n    if (!Array.isArray(items)) {\n      if (items !== null && items !== undefined) {\n        items = [items];\n      } else {\n        items = [];\n      }\n    }\n\n    items.forEach(\n      function(item, i) {\n        lookups[i] = '_' + this.nextLookupId;\n        this.nextLookupId++;\n      }.bind(this)\n    );\n\n    return {\n      lookups,\n    };\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    const lookups = this.state.lookups;\n\n    const items = newProps.field.value;\n\n    // Need to set artificial keys for new array items.\n    if (items.length > lookups.length) {\n      for (let i = lookups.length; i < items.length; i++) {\n        lookups[i] = '_' + this.nextLookupId;\n        this.nextLookupId++;\n      }\n    }\n\n    this.setState({\n      lookups,\n    });\n  },\n\n  onChange: function(i, newValue, info) {\n    const newArrayValue = this.props.field.value.slice(0);\n    newArrayValue[i] = newValue;\n    this.onBubbleValue(newArrayValue, info);\n  },\n\n  onAppend: function(itemChoiceIndex) {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const newValue = config.createNewChildFieldValue(field, itemChoiceIndex);\n\n    let items = field.value;\n\n    items = items.concat(newValue);\n\n    this.onChangeValue(items);\n  },\n\n  onRemove: function(i) {\n    const lookups = this.state.lookups;\n    lookups.splice(i, 1);\n    this.setState({\n      lookups,\n    });\n    const newItems = this.props.field.value.slice(0);\n    newItems.splice(i, 1);\n    this.onChangeValue(newItems);\n  },\n\n  onMove: function(fromIndex, toIndex) {\n    const lookups = this.state.lookups;\n    const fromId = lookups[fromIndex];\n    const toId = lookups[toIndex];\n    lookups[fromIndex] = toId;\n    lookups[toIndex] = fromId;\n    this.setState({\n      lookups,\n    });\n\n    const newItems = this.props.field.value.slice(0);\n    if (\n      fromIndex !== toIndex &&\n      fromIndex >= 0 &&\n      fromIndex < newItems.length &&\n      toIndex >= 0 &&\n      toIndex < newItems.length\n    ) {\n      newItems.splice(toIndex, 0, newItems.splice(fromIndex, 1)[0]);\n    }\n    this.onChangeValue(newItems);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fields = config.createChildFields(field);\n\n    const arrayControl =\n      !config.fieldIsReadOnly(field) &&\n      config.createElement('array-control', {\n        typeName: 'Array',\n        field,\n        onAppend: this.onAppend,\n      });\n\n    const tabIndex = this.isReadOnly() ? null : this.props.tabIndex || 0;\n\n    const numItems = field.value.length;\n\n    const arrayItemElements = config.cssTransitionWrapper(\n      fields.map((childField, i) => {\n        return config.createElement('array-item', {\n          parentTypeName: 'Array',\n          key: this.state.lookups[i],\n          field: childField,\n          index: i,\n          numItems,\n          onMove: this.onMove,\n          onRemove: this.onRemove,\n          onChange: this.onChange,\n          onAction: this.onBubbleAction,\n        });\n      })\n    );\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Array',\n        field,\n        plain: this.props.plain,\n      },\n      <div\n        renderWith={this.renderWith('FieldBody')}\n        className={cx(this.props.classes)}\n        tabIndex={tabIndex}\n      >\n        {arrayItemElements}\n        {arrayControl}\n      </div>\n    );\n  },\n});\n","// # object component\n\n/*\nRender a field to edit a array of key / value objects, where duplicate keys are allowed.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\nimport update from 'immutability-helper';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nconst keyCountsByKey = assocList => {\n  const counts = {};\n  assocList.forEach(row => {\n    if (!counts[row.key]) {\n      counts[row.key] = 0;\n    }\n    counts[row.key] += 1;\n  });\n  return counts;\n};\n\nexport default createReactClass({\n  displayName: 'AssocList',\n\n  mixins: [FieldMixin],\n\n  nextLookupId: 0,\n\n  getNextLookupId() {\n    return '_' + this.nextLookupId++;\n  },\n\n  getInitialState() {\n    const field = this.props.field;\n\n    // maintain artificial keys, keyed by row index, to have persistent key\n    const lookups = [];\n    field.value.forEach((row, i) => {\n      lookups[i] = this.getNextLookupId();\n    });\n\n    return { lookups };\n  },\n\n  componentWillReceiveProps(newProps) {\n    const rows = newProps.field.value;\n\n    // set artificial keys for new rows\n    if (rows.length > this.state.lookups.length) {\n      const lookupsToPush = [];\n      for (let i = this.state.lookups.length; i < rows.length; i++) {\n        lookupsToPush.push(this.getNextLookupId());\n      }\n      const lookups = update(this.state.lookups, {\n        $push: lookupsToPush,\n      });\n      this.setState({ lookups });\n    }\n  },\n\n  onChange(index, newValue) {\n    const field = this.props.field;\n\n    const updatedRow = { key: field.value[index].key, value: newValue };\n    const rows = update(field.value, {\n      $splice: [[index, 1, updatedRow]],\n    });\n\n    // this.onBubbleValue(rows, info);\n    this.onChangeValue(rows);\n  },\n\n  onAppend() {\n    const field = this.props.field;\n\n    const newRow = { key: '', value: '' };\n    const rows = update(field.value, {\n      $push: [newRow],\n    });\n\n    // componentWillReceiveProps will add the new artificial key to lookups\n    this.onChangeValue(rows);\n  },\n\n  onRemove(index) {\n    const field = this.props.field;\n\n    // componentWillReceiveProps can't know which item was deleted, so\n    // put new artificial key in lookups here\n    const lookups = update(this.state.lookups, {\n      $splice: [[index, 1]],\n    });\n    this.setState({ lookups });\n\n    const rows = update(field.value, {\n      $splice: [[index, 1]],\n    });\n    this.onChangeValue(rows);\n  },\n\n  onChangeKey(index, newKey) {\n    const field = this.props.field;\n\n    const updatedRow = { key: newKey, value: field.value[index].value };\n    const rows = update(field.value, {\n      $splice: [[index, 1, updatedRow]],\n    });\n\n    this.onChangeValue(rows);\n  },\n\n  render() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const fields = config.createChildFields(field);\n    const keyCounts = keyCountsByKey(field.value);\n\n    const content = config.cssTransitionWrapper(\n      field.value.map(\n        function(row, i) {\n          return config.createElement('assoc-list-item', {\n            parentTypeName: 'AssocList',\n            key: this.state.lookups[i],\n            index: i,\n            displayKey: row.key,\n            field: fields[i],\n            isDuplicateKey: keyCounts[row.key] > 1,\n            onChangeKey: this.onChangeKey,\n            onChange: this.onChange,\n            onRemove: this.onRemove,\n            onAction: this.onBubbleAction,\n          });\n        }.bind(this)\n      )\n    );\n\n    const assocList = config.createElement('assoc-list-control', {\n      typeName: 'AssocList',\n      field,\n      onAppend: this.onAppend,\n    });\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'AssocList',\n        field,\n        plain: this.props.plain,\n      },\n      <div\n        renderWith={this.renderWith('FieldBody')}\n        className={cx(this.props.classes)}\n      >\n        {content}\n        {assocList}\n      </div>\n    );\n  },\n});\n","// # boolean component\n\n/*\nRender a dropdown to handle yes/no boolean values.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\nexport default createReactClass({\n  displayName: 'Boolean',\n\n  mixins: [FieldMixin],\n\n  onChange: function(newValue) {\n    this.onChangeValue(newValue);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const choices = config.fieldBooleanChoices(field);\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Boolean',\n        field,\n        plain: this.props.plain,\n      },\n      config.createElement('select-value', {\n        choices,\n        field,\n        onChange: this.onChange,\n        onAction: this.onBubbleAction,\n      })\n    );\n  },\n});\n","// # checkbox-array component\n\n/*\nUsed with array values to supply multiple checkboxes for adding multiple\nenumerated values to an array.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport FieldMixin from '../../mixins/field';\nimport { ref } from '../../utils';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'CheckboxArray',\n\n  mixins: [FieldMixin],\n\n  getInitialState: function() {\n    return {\n      choices: this.props.config.fieldChoices(this.props.field),\n    };\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    this.setState({\n      choices: newProps.config.fieldChoices(newProps.field),\n    });\n  },\n\n  onChange: function() {\n    // Get all the checked checkboxes and convert to an array of values.\n    let choiceNodes = this.choicesRef.getElementsByTagName('input');\n    choiceNodes = Array.prototype.slice.call(choiceNodes, 0);\n    const values = choiceNodes\n      .map(function(node) {\n        return node.checked ? node.value : null;\n      })\n      .filter(function(value) {\n        return value;\n      });\n    this.onChangeValue(values);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const choices = this.state.choices || [];\n\n    const isInline = !_.find(choices, function(choice) {\n      return choice.sample;\n    });\n\n    const inputs = choices.map(\n      function(choice, i) {\n        const inputField = (\n          <span\n            renderWith={this.renderWith('InputWrapper')}\n            style={{ whiteSpace: 'nowrap' }}\n          >\n            <input\n              renderWith={this.renderWith('CheckboxInput')}\n              name={field.key}\n              type=\"checkbox\"\n              value={choice.value}\n              checked={field.value.indexOf(choice.value) >= 0 ? true : false}\n              onChange={this.onChange}\n              onFocus={this.onFocusAction}\n              onBlur={this.onBlurAction}\n              disabled={this.isReadOnly()}\n            />\n            <span renderWith={this.renderWith('InputSpacer')} key=\"spacer\">\n              {' '}\n            </span>\n            <span\n              renderWith={this.renderWith('ChoiceLabel')}\n              className=\"field-choice-label\"\n            >\n              {choice.label}\n            </span>\n          </span>\n        );\n\n        if (isInline) {\n          return (\n            <span\n              renderWith={this.renderWith('Choice')}\n              key={i}\n              className=\"field-choice\"\n            >\n              {inputField}{' '}\n            </span>\n          );\n        }\n\n        return (\n          <span\n            renderWith={this.renderWith('Choice')}\n            key={i}\n            className=\"field-choice\"\n          >\n            {inputField}{' '}\n            {config.createElement('sample', {\n              typeName: 'CheckboxArray',\n              field,\n              choice,\n            })}\n          </span>\n        );\n      }.bind(this)\n    );\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'CheckboxArray',\n        field,\n      },\n      <div\n        renderWith={this.renderWith('FieldBody')}\n        className={cx(this.props.classes)}\n        ref={ref(this, 'choices')}\n      >\n        {inputs}\n      </div>\n    );\n  },\n});\n","// # checkbox-boolean component\n\n/*\nRender a field that can edit a boolean with a checkbox.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'CheckboxBoolean',\n\n  mixins: [FieldMixin],\n\n  onChange: function(event) {\n    this.onChangeValue(event.target.checked);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fieldLabelOrHelp =\n      config.fieldHelpText(field) || config.fieldLabel(field);\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'CheckboxBoolean',\n        config,\n        field,\n        plain: true,\n      },\n      <span\n        renderWith={this.renderWith('FieldBody')}\n        style={{ whiteSpace: 'nowrap' }}\n      >\n        <input\n          renderWith={this.renderWith('CheckboxInput')}\n          key=\"input\"\n          type=\"checkbox\"\n          checked={field.value}\n          className={cx(this.props.classes)}\n          onChange={this.onChange}\n          onFocus={this.onFocusAction}\n          onBlur={this.onBlurAction}\n          disabled={this.isReadOnly()}\n        />\n        <span renderWith={this.renderWith('InputSpacer')} key=\"spacer\">\n          {' '}\n        </span>\n        <span renderWith={this.renderWith('InputLabel')} key=\"label\">\n          {fieldLabelOrHelp}\n        </span>\n      </span>\n    );\n  },\n});\n","'use strict';\n\n/*eslint no-script-url:0 */\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport FieldMixin from '../../mixins/field';\nimport { ref } from '../../utils';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\n/*\n  A very trimmed down field that uses CodeMirror for syntax highlighting *only*.\n */\nexport default createReactClass({\n  displayName: 'Code',\n\n  mixins: [FieldMixin],\n\n  componentDidMount: function() {\n    this.createCodeMirrorEditor();\n  },\n\n  componentWillUnmount: function() {\n    this.removeCodeMirrorEditor();\n  },\n\n  getInitialState: function() {\n    return {\n      value: this.props.field.value,\n    };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    this.setState({ value: nextProps.field.value });\n  },\n\n  tabIndex: function() {\n    if (this.isReadOnly()) {\n      return null;\n    }\n    return this.props.field.tabIndex || 0;\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const props = { typeName: 'Code', field, plain: this.props.plain };\n\n    const textBoxClasses = cx(\n      _.extend({}, this.props.classes, { 'pretty-text-box': true })\n    );\n\n    // Render read-only version.\n    const element = (\n      <div\n        renderWith={this.renderWith('FieldBody')}\n        className=\"pretty-text-wrapper\"\n      >\n        <div\n          renderWith={this.renderWith('TabTarget')}\n          role=\"presentation\"\n          className={textBoxClasses}\n          tabIndex={this.tabIndex()}\n          onFocus={this.onFocusAction}\n          onBlur={this.onBlurAction}\n        >\n          <div\n            renderWith={this.renderWith('TextWrapper')}\n            ref={ref(this, 'textBox')}\n            className=\"internal-text-wrapper\"\n          />\n        </div>\n      </div>\n    );\n\n    return config.createElement('field', props, element);\n  },\n\n  createCodeMirrorEditor: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const readOnly = config.fieldIsReadOnly(field);\n\n    let options = {\n      lineWrapping: true,\n      tabindex: this.tabIndex(),\n      value: String(this.state.value),\n      mode: this.props.field.language || null,\n      indentWithTabs: false,\n      indentUnit: 2,\n      tabSize: 2,\n      extraKeys: {\n        Tab: function(cm) {\n          if (_.any(cm.getSelections(), Boolean)) {\n            cm.execCommand('defaultTab');\n          } else {\n            cm.execCommand('insertSoftTab');\n          }\n        },\n        'Shift-Tab': function(cm) {\n          cm.execCommand('indentLess');\n        },\n      },\n      readOnly: readOnly ? 'nocursor' : false, // 'nocursor' means read only and not focusable\n    };\n\n    if (this.props.field.language === 'python') {\n      options.indentUnit = 4;\n      options.tabSize = 4;\n    }\n\n    if (this.props.field.codeMirrorOptions) {\n      options = _.extend({}, options, this.props.field.codeMirrorOptions);\n    }\n\n    const textBox = this.textBoxRef;\n    this.codeMirror = config.codeMirror()(textBox, options);\n    this.codeMirror.on('change', this.onCodeMirrorChange);\n  },\n\n  removeCodeMirrorEditor: function() {\n    const textBoxNode = this.textBoxRef;\n    const cmNode = textBoxNode.firstChild;\n    textBoxNode.removeChild(cmNode);\n    this.codeMirror.off('change', this.onCodeMirrorChange);\n    this.codeMirror = null;\n  },\n\n  onCodeMirrorChange: function() {\n    if (this.updatingCodeMirror) {\n      // avoid recursive update cycle, and mark the code mirror manual update as done\n      this.updatingCodeMirror = false;\n      return;\n    }\n\n    const newValue = this.codeMirror.getValue();\n    this.onChangeValue(newValue);\n    this.setState({ value: newValue });\n  },\n});\n","// # copy component\n\n/*\nRender non-editable html/text (think article copy).\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Copy',\n\n  mixins: [FieldMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <div\n        renderWith={this.renderWith('FieldBody')}\n        className={cx(this.props.classes)}\n        dangerouslySetInnerHTML={{\n          __html: this.props.config.fieldHelpText(this.props.field),\n        }}\n      />\n    );\n  },\n});\n","// # fields component\n\n/*\nRender a field to edit the values of an object with static properties.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Fields',\n\n  mixins: [FieldMixin],\n\n  onChangeField: function(key, newValue, info) {\n    if (!key) {\n      const parentPath = this.props.config.fieldValuePath(this.props.field);\n      const childPath = this.props.config\n        .fieldValuePath(info.field)\n        .slice(parentPath.length);\n      key = childPath[0];\n      if (key) {\n        newValue = newValue[key];\n      }\n    }\n    if (key) {\n      const newObjectValue = _.extend({}, this.props.field.value);\n      newObjectValue[key] = newValue;\n      this.onBubbleValue(newObjectValue, info);\n    }\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fields = config.createChildFields(field);\n\n    // Want to move to fieldset with legend, but doing a little backward-compatible\n    // hacking here, only converting child `fields` without keys.\n    const isGroup = !!(field.parent && (field.key === '' || field.key == null));\n\n    const classes = _.extend({}, this.props.classes);\n\n    if (isGroup) {\n      classes['child-fields-group'] = true;\n    }\n\n    const legend = !isGroup ? null : (\n      <legend renderWith={this.renderWith('Legend')}>\n        {config.fieldLabel(field)}\n      </legend>\n    );\n\n    const help = !isGroup\n      ? null\n      : config.createElement('help', {\n          typeName: 'Fields',\n          config,\n          field,\n        });\n\n    const content = fields.map(\n      function(childField, i) {\n        const key = childField.key || i;\n        return config.createFieldElement({\n          key: key || i,\n          field: childField,\n          onChange: this.onChangeField.bind(this, childField.key),\n          onAction: this.onBubbleAction,\n        });\n      }.bind(this)\n    );\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Fields',\n        config,\n        field,\n        plain: isGroup || this.props.plain,\n      },\n      <fieldset\n        renderWith={this.renderWith('FieldBody')}\n        className={cx(classes)}\n      >\n        {legend}\n        {help}\n        {content}\n      </fieldset>\n    );\n  },\n});\n","// # fields component\n\n/*\nRender a fields in groups. Grouped by field.groupKey property.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nconst groupFields = function(fields, humanize) {\n  const groupedFields = [];\n\n  fields.forEach(function(field) {\n    if (field.groupKey) {\n      let group = _.find(groupedFields, function(g) {\n        return g.isGroup && field.groupKey === g.key;\n      });\n\n      if (!group) {\n        group = {\n          key: field.groupKey,\n          label: field.groupLabel || humanize(field.groupKey),\n          children: [],\n          isGroup: true,\n        };\n        groupedFields.push(group);\n      }\n\n      group.children.push(field);\n    } else {\n      groupedFields.push(field); // top level field\n    }\n  });\n\n  return groupedFields;\n};\n\nexport default createReactClass({\n  displayName: 'GroupedFields',\n\n  mixins: [FieldMixin],\n\n  onChangeField: function(key, newValue, info) {\n    if (key) {\n      const newObjectValue = _.extend({}, this.props.field.value);\n      newObjectValue[key] = newValue;\n      this.onBubbleValue(newObjectValue, info);\n    }\n  },\n\n  renderFields: function(fields, groupKey, groupLabel) {\n    const config = this.props.config;\n    const self = this;\n\n    const childFields = fields.map(function(fieldOrGroup) {\n      if (fieldOrGroup.isGroup) {\n        return self.renderFields(\n          fieldOrGroup.children,\n          fieldOrGroup.key,\n          fieldOrGroup.label\n        );\n      }\n\n      const key = fieldOrGroup.key;\n      return config.createFieldElement({\n        key,\n        field: fieldOrGroup,\n        onChange: self.onChangeField.bind(self, key),\n        onAction: self.onBubbleAction,\n      });\n    });\n\n    let legend;\n    let className = cx(this.props.classes);\n\n    if (groupLabel) {\n      legend = (\n        <legend renderWith={this.renderWith('Label')}>{groupLabel}</legend>\n      );\n      className += ' child-fields-group';\n    }\n\n    return (\n      <fieldset\n        renderWith={this.renderWith('FieldBody')}\n        key={groupKey}\n        className={className}\n      >\n        {legend}\n        {childFields}\n      </fieldset>\n    );\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fields = groupFields(\n      config.createChildFields(field),\n      config.humanize\n    );\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'GroupedFields',\n        config,\n        field,\n        plain: this.props.plain,\n      },\n      this.renderFields(fields)\n    );\n  },\n});\n","// # json component\n\n/*\nTextarea editor for JSON. Will validate the JSON before setting the value, so\nwhile the value is invalid, no external state changes will occur.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Json',\n\n  mixins: [FieldMixin],\n\n  getDefaultProps: function() {\n    return {\n      rows: 5,\n    };\n  },\n\n  isValidValue: function(value) {\n    try {\n      JSON.parse(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n\n  getInitialState: function() {\n    return {\n      isValid: true,\n      value: JSON.stringify(this.props.field.value, null, 2),\n    };\n  },\n\n  onChange: function(event) {\n    const isValid = this.isValidValue(event.target.value);\n\n    if (isValid) {\n      // Need to handle this better. Need to track position.\n      this._isChanging = true;\n      this.onChangeValue(JSON.parse(event.target.value));\n    }\n\n    this.setState({\n      isValid,\n      value: event.target.value,\n    });\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this._isChanging) {\n      this.setState({\n        isValid: true,\n        value: JSON.stringify(nextProps.field.value, null, 2),\n      });\n    }\n    this._isChanging = false;\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Json',\n        field: config.fieldWithValue(field, this.state.value),\n        plain: this.props.plain,\n      },\n      <textarea\n        renderWith={this.renderWith('TextareaInput', {\n          isValid: this.state.isValid,\n        })}\n        className={cx(this.props.classes)}\n        value={this.state.value}\n        onChange={this.onChange}\n        rows={config.fieldRows(field) || this.props.rows}\n        onFocus={this.onFocusAction}\n        onBlur={this.onBlurAction}\n        disabled={this.isReadOnly()}\n      />\n    );\n  },\n});\n","// # object component\n\n/*\nRender a field to edit an object with dynamic child fields.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport update from 'immutability-helper';\n\nimport FieldMixin from '../../mixins/field';\n\nconst hasDuplicateKeys = assocList => {\n  let hasDups = false;\n  const keys = {};\n\n  assocList.forEach(row => {\n    if (keys[row.key]) {\n      hasDups = true;\n      return;\n    }\n    keys[row.key] = true;\n  });\n\n  return hasDups;\n};\n\nexport default createReactClass({\n  displayName: 'Object',\n\n  mixins: [FieldMixin],\n\n  getInitialState() {\n    const config = this.props.config;\n    return {\n      assocList: config.objectToAssocList(this.props.field.value),\n    };\n  },\n\n  orderedAssocList(props) {\n    const config = this.props.config;\n    const newAssocList = config.objectToAssocList(props.field.value);\n\n    // If we have an existing key order, use that.\n    if (this.keyOrder) {\n      const keyToItem = newAssocList.reduce((obj, item) => {\n        obj[item.key] = item;\n        return obj;\n      }, {});\n      const keyOrderSet = this.keyOrder.reduce((obj, key) => {\n        obj[key] = true;\n        return obj;\n      }, {});\n      // Make a list in order of old keys.\n      const orderedAssocList = this.keyOrder.reduce((list, key) => {\n        if (key in keyToItem) {\n          list.push(keyToItem[key]);\n        }\n        return list;\n      }, []);\n      // Add any new keys at the end.\n      newAssocList.reduce((list, item) => {\n        if (!(item.key in keyOrderSet)) {\n          list.push(item);\n        }\n        return list;\n      }, orderedAssocList);\n      return orderedAssocList;\n    }\n    return newAssocList;\n  },\n\n  componentWillReceiveProps(newProps) {\n    if (hasDuplicateKeys(this.state.assocList)) {\n      return; // talk to the hand\n    }\n    const newAssocList = this.orderedAssocList(newProps);\n    this.keyOrder = newAssocList.map(item => item.key);\n    this.setState({\n      assocList: newAssocList,\n    });\n  },\n\n  onChange(assocList) {\n    const config = this.props.config;\n    const value = config.assocListToObject(assocList);\n    // Need to hold onto keys to compare when receiving props.\n    this.keyOrder = assocList.map(item => item.key);\n    this.setState({ assocList });\n    if (!hasDuplicateKeys(assocList)) {\n      const field = update(this.props.field, {\n        value: { $set: value },\n      });\n      this.onBubbleValue(value, { field });\n    }\n  },\n\n  render() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault() {\n    const config = this.props.config;\n    const field = update(this.props.field, {\n      value: { $set: this.state.assocList },\n      type: { $set: 'assoc-list' },\n    });\n\n    return config.createElement('assoc-list', {\n      field,\n      onChange: this.onChange,\n      onAction: this.onBubbleAction,\n    });\n  },\n});\n","// # single-line-string component\n\n/*\nRender a single line text input.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Password',\n\n  mixins: [FieldMixin],\n\n  onChange: function(event) {\n    this.onChangeValue(event.target.value);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Password',\n        config,\n        field,\n        plain: this.props.plain,\n      },\n      <input\n        renderWith={this.renderWith('PasswordInput')}\n        type=\"password\"\n        value={this.props.field.value}\n        className={cx(this.props.classes)}\n        onChange={this.onChange}\n        onFocus={this.onFocusAction}\n        onBlur={this.onBlurAction}\n        autoComplete={field.autoComplete}\n        autoFocus={field.autoFocus}\n        placeholder={field.placeholder}\n        disabled={this.isReadOnly()}\n      />\n    );\n  },\n});\n","// # pretty boolean component\n\n/*\nRender pretty boolean component with non-native drop-down\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\nexport default createReactClass({\n  displayName: 'PrettyBoolean',\n\n  mixins: [FieldMixin],\n\n  onChange: function(newValue) {\n    this.onChangeValue(newValue);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const choices = config.fieldBooleanChoices(field);\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'PrettyBoolean',\n        field,\n        plain: this.props.plain,\n      },\n      config.createElement('pretty-select-value', {\n        typeName: 'PrettyBoolean',\n        choices,\n        field,\n        onChange: this.onChange,\n        onAction: this.onBubbleAction,\n      })\n    );\n  },\n});\n","// # select component\n\n/*\nRender select element to give a user choices for the value of a field. Renders non-native\nselect drop down and supports fancier renderings.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\nexport default createReactClass({\n  displayName: 'PrettySelect',\n\n  mixins: [FieldMixin],\n\n  getInitialState: function() {\n    return {\n      choices: this.props.config.fieldPrettyChoices(this.props.field),\n    };\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    this.setState({\n      choices: newProps.config.fieldPrettyChoices(newProps.field),\n    });\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  onChange: function(value, info) {\n    if (info && info.isCustomValue) {\n      this.props.onChange(value, {\n        field: this.props.field,\n        isCustomValue: true,\n      });\n    } else {\n      this.onChangeValue(value);\n    }\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'PrettySelect',\n        config,\n        field,\n        plain: this.props.plain,\n        classes: this.props.classes,\n      },\n      config.createElement('pretty-select-value', {\n        typeName: 'PrettySelect',\n        choices: this.state.choices,\n        isAccordion: field.isAccordion,\n        isAccordionAlwaysCollapsable: field.isAccordionAlwaysCollapsable,\n        field,\n        onChange: this.onChange,\n        onAction: this.onBubbleAction,\n      })\n    );\n  },\n});\n","'use strict';\n\n/*eslint no-script-url:0 */\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\n/*\n   Wraps a PrettyTextInput to be a stand alone field.\n */\nexport default createReactClass({\n  displayName: 'PrettyText',\n\n  mixins: [FieldMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const props = { typeName: 'PrettyText', field, plain: this.props.plain };\n\n    const readOnly = config.fieldIsReadOnly(field);\n\n    // The tab index makes this control focusable and editable. If read only, no tabIndex\n    const tabIndex = readOnly ? null : field.tabIndex;\n\n    const element = config.createElement('pretty-text-input', {\n      typeName: 'PrettyText',\n      classes: this.props.classes,\n      tabIndex,\n      onChange: this.onChangeValue,\n      onFocus: this.onFocusAction,\n      onBlur: this.onBlurAction,\n      onAction: this.onBubbleAction,\n      field: this.props.field,\n      value: this.props.field.value,\n      isAccordion: this.props.field.isAccordion,\n      selectedChoices: this.props.config.fieldSelectedReplaceChoices(\n        this.props.field\n      ),\n      replaceChoices: this.props.config.fieldReplaceChoices(this.props.field),\n      readOnly,\n    });\n\n    return config.createElement('field', props, element);\n  },\n});\n","// # select component\n\n/*\nRender select element to give a user choices for the value of a field. Note\nit should support values other than strings. Currently this is only tested for\nboolean values, but it _should_ work for other values.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\nexport default createReactClass({\n  displayName: 'Select',\n\n  mixins: [FieldMixin],\n\n  getInitialState: function() {\n    return {\n      choices: this.props.config.fieldChoices(this.props.field),\n    };\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    this.setState({\n      choices: newProps.config.fieldChoices(newProps.field),\n    });\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'Select',\n        config,\n        field,\n        plain: this.props.plain,\n      },\n      config.createElement('select-value', {\n        choices: this.state.choices,\n        field,\n        onChange: this.onChangeValue,\n        onAction: this.onBubbleAction,\n      })\n    );\n  },\n});\n","// # single-line-string component\n\n/*\nRender a single line text input.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'SingleLineString',\n\n  mixins: [FieldMixin],\n\n  onChange: function(event) {\n    this.onChangeValue(event.target.value);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const readOnly = config.fieldIsReadOnly(field);\n    const tabIndex = readOnly ? -1 : this.props.tabIndex || 0;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: 'SingleLineString',\n        config,\n        field,\n        plain: this.props.plain,\n      },\n      <input\n        renderWith={this.renderWith('TextInput')}\n        tabIndex={tabIndex}\n        type=\"text\"\n        value={this.props.field.value}\n        className={cx(this.props.classes)}\n        onChange={this.onChange}\n        onFocus={this.onFocusAction}\n        onBlur={this.onBlurAction}\n        autoComplete={field.autoComplete}\n        autoFocus={field.autoFocus}\n        placeholder={field.placeholder}\n        readOnly={readOnly}\n      />\n    );\n  },\n});\n","// # string component\n\n/*\nRender a field that can edit a string value.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'String',\n\n  mixins: [FieldMixin],\n\n  onChange: function(event) {\n    this.onChangeValue(event.target.value);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return config.createElement(\n      'field',\n      {\n        typeName: this.props.typeName || 'String',\n        config,\n        field,\n        plain: this.props.plain,\n      },\n      <textarea\n        renderWith={this.renderWith('TextareaInput')}\n        value={field.value}\n        className={cx(this.props.classes)}\n        rows={field.rows || this.props.rows}\n        onChange={this.onChange}\n        onFocus={this.onFocusAction}\n        onBlur={this.onBlurAction}\n        disabled={this.isReadOnly()}\n      />\n    );\n  },\n});\n","// # unknown component\n\n/*\nRender a field with an unknown type.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport FieldMixin from '../../mixins/field';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Unknown',\n\n  mixins: [FieldMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <div renderWith={this.renderWith('FieldBody')}>\n        <div renderWith={this.renderWith('NotFound')}>\n          Component not found for:\n        </div>\n        <pre renderWith={this.renderWith('FieldTemplate')}>\n          {JSON.stringify(this.props.field.rawFieldTemplate, null, 2)}\n        </pre>\n      </div>\n    );\n  },\n});\n","// # add-item component\n\n/*\nThe add button to append an item to a field.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'AddItem',\n\n  mixins: [HelperMixin],\n\n  getDefaultProps: function() {\n    return {\n      label: '+',\n    };\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const tabIndex = this.props.readOnly ? null : 0;\n\n    const onKeyDown = event => {\n      if (event.keyCode === 13) {\n        this.props.onClick(event);\n      }\n    };\n\n    return (\n      <button\n        renderWith={this.renderWith('AddItem')}\n        role=\"button\"\n        tabIndex={tabIndex}\n        onKeyDown={onKeyDown}\n        className={cx(this.props.classes)}\n        onClick={this.props.onClick}\n      >\n        {this.props.label}\n      </button>\n    );\n  },\n});\n","// # array-control component\n\n/*\nRender the item type choices and the add button for an array.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ArrayControl',\n\n  mixins: [HelperMixin],\n\n  getInitialState: function() {\n    return {\n      fieldTemplateIndex: 0,\n    };\n  },\n\n  onSelect: function(index) {\n    this.setState({\n      fieldTemplateIndex: index,\n    });\n  },\n\n  onAppend: function() {\n    this.props.onAppend(this.state.fieldTemplateIndex);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n\n    const field = this.props.field;\n    const fieldTemplates = config.fieldItemFieldTemplates(field);\n    let typeChoices = null;\n\n    if (!this.isReadOnly() && fieldTemplates.length > 0) {\n      typeChoices = config.createElement('field-template-choices', {\n        typeName: this.props.typeName,\n        field,\n        fieldTemplateIndex: this.state.fieldTemplateIndex,\n        onSelect: this.onSelect,\n      });\n    }\n\n    let addItem;\n    if (!this.isReadOnly()) {\n      addItem = config.createElement('add-item', {\n        typeName: this.props.typeName,\n        field,\n        onClick: this.onAppend,\n        tabIndex: this.props.tabIndex,\n      });\n    }\n\n    return (\n      <div\n        renderWith={this.renderWith('ListControl')}\n        className={cx(this.props.classes)}\n      >\n        {typeChoices} {addItem}\n      </div>\n    );\n  },\n});\n","// # array-item-control component\n\n/*\nRender the remove and move buttons for an array field.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ArrayItemControl',\n\n  mixins: [HelperMixin],\n\n  onMoveBack: function() {\n    this.props.onMove(this.props.index, this.props.index - 1);\n  },\n\n  onMoveForward: function() {\n    this.props.onMove(this.props.index, this.props.index + 1);\n  },\n\n  onRemove: function() {\n    this.props.onRemove(this.props.index);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const isLastItem =\n      field.fieldIndex === 0 && field.parent.value.length === 1;\n\n    const isFirstItem = field.fieldIndex === 0;\n\n    const isLastMoveableItem =\n      field.fieldIndex === field.parent.value.length - 1;\n\n    const removeItemControl = config.createElement('remove-item', {\n      parentTypeName: this.props.parentTypeName,\n      field,\n      onClick: this.onRemove,\n      onMaybeRemove: this.props.onMaybeRemove,\n      readOnly: isLastItem && !config.isRemovalOfLastArrayItemAllowed(field),\n    });\n\n    const moveItemForward =\n      this.props.index < this.props.numItems - 1\n        ? config.createElement('move-item-forward', {\n            parentTypeName: this.props.parentTypeName,\n            field,\n            onClick: this.onMoveForward,\n            classes: { 'is-first-item': isFirstItem },\n          })\n        : null;\n\n    const moveItemBack =\n      this.props.index > 0\n        ? config.createElement('move-item-back', {\n            parentTypeName: this.props.parentTypeName,\n            field,\n            onClick: this.onMoveBack,\n            classes: { 'is-last-item': isLastMoveableItem },\n          })\n        : null;\n\n    return (\n      <div\n        renderWith={this.renderWith('ListItemControl')}\n        className={cx(this.props.classes)}\n      >\n        <span renderWith={this.renderWith('ListItemMoveControl')}>\n          {moveItemBack}\n          {moveItemForward}\n        </span>\n        {removeItemControl}\n      </div>\n    );\n  },\n});\n","// # array-item-value component\n\n/*\nRender the value of an array item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ArrayItemValue',\n\n  mixins: [HelperMixin],\n\n  onChangeField: function(newValue, info) {\n    this.props.onChange(this.props.index, newValue, info);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    return (\n      <div\n        renderWith={this.renderWith('ListItemValue')}\n        className={cx(this.props.classes)}\n      >\n        {config.createFieldElement({\n          field,\n          onChange: this.onChangeField,\n          onAction: this.onBubbleAction,\n        })}\n      </div>\n    );\n  },\n});\n","// # array-item component\n\n/*\nRender an array item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\nimport _ from '../../undash';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ArrayItem',\n\n  mixins: [HelperMixin],\n\n  getInitialState: function() {\n    return {\n      isMaybeRemoving: false,\n    };\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  onMaybeRemove: function(isMaybeRemoving) {\n    this.setState({\n      isMaybeRemoving,\n    });\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const classes = _.extend({}, this.props.classes);\n\n    if (this.state.isMaybeRemoving) {\n      classes['maybe-removing'] = true;\n    }\n\n    let arrayItemControl;\n    if (!config.fieldIsReadOnly(field)) {\n      arrayItemControl = config.createElement('array-item-control', {\n        parentTypeName: this.props.parentTypeName,\n        field,\n        index: this.props.index,\n        numItems: this.props.numItems,\n        onMove: this.props.onMove,\n        onRemove: this.props.onRemove,\n        onMaybeRemove: this.onMaybeRemove,\n      });\n    }\n\n    const arrayItemValue = config.createElement('array-item-value', {\n      parentTypeName: this.props.parentTypeName,\n      field,\n      index: this.props.index,\n      onChange: this.props.onChange,\n      onAction: this.onBubbleAction,\n    });\n\n    return (\n      <div renderWith={this.renderWith('ListItem')} className={cx(classes)}>\n        {arrayItemValue}\n        {arrayItemControl}\n      </div>\n    );\n  },\n});\n","// # assoc-list-control component\n\n/*\nRender the item type choices and the add button.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ObjectControl',\n\n  mixins: [HelperMixin],\n\n  getInitialState: function() {\n    return {\n      fieldTemplateIndex: 0,\n    };\n  },\n\n  onSelect: function(index) {\n    this.setState({\n      fieldTemplateIndex: index,\n    });\n  },\n\n  onAppend: function() {\n    this.props.onAppend(this.state.fieldTemplateIndex);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const fieldTemplates = config.fieldChildFieldTemplates(field);\n\n    let typeChoices = null;\n\n    if (fieldTemplates.length > 0) {\n      typeChoices = config.createElement('field-template-choices', {\n        typeName: this.props.typeName,\n        field,\n        fieldTemplateIndex: this.state.fieldTemplateIndex,\n        onSelect: this.onSelect,\n      });\n    }\n\n    return (\n      <div\n        renderWith={this.renderWith('ListControl')}\n        className={cx(this.props.classes)}\n      >\n        {typeChoices}{' '}\n        {config.createElement('add-item', {\n          typeName: this.props.typeName,\n          field,\n          onClick: this.onAppend,\n        })}\n      </div>\n    );\n  },\n});\n","// # assoc-item-control component\n\n/*\nRender the remove buttons for an object item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'AssocListItemControl',\n\n  mixins: [HelperMixin],\n\n  onRemove: function() {\n    this.props.onRemove(this.props.index);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const isLastItem =\n      field.fieldIndex === 0 && Object.keys(field.parent.value).length === 1;\n\n    const removeItem = config.createElement('remove-item', {\n      field,\n      onClick: this.onRemove,\n      readOnly:\n        isLastItem && !config.isRemovalOfLastAssocListItemAllowed(field),\n    });\n\n    return (\n      <div\n        renderWith={this.renderWith('ListItemControl')}\n        className={cx(this.props.classes)}\n      >\n        {removeItem}\n      </div>\n    );\n  },\n});\n","// # assoc-item-key component\n\n/*\nRender an object item key editor.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\nimport _ from '../../undash';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'AssocListItemKey',\n\n  mixins: [HelperMixin],\n\n  onChange: function(event) {\n    this.props.onChange(event.target.value);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const classes = _.extend({}, this.props.classes);\n    if (this.props.isDuplicateKey) {\n      classes['validation-error-duplicate-key'] = true;\n    }\n\n    return (\n      <input\n        renderWith={this.renderWith('ListItemKeyInput')}\n        className={cx(classes)}\n        type=\"text\"\n        value={this.props.displayKey}\n        onChange={this.onChange}\n        onFocus={this.onFocusAction}\n        onBlur={this.onBlurAction}\n      />\n    );\n  },\n});\n","// # assoc-item-value component\n\n/*\nRender the value of an object item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'AssocListItemValue',\n\n  mixins: [HelperMixin],\n\n  onChangeField: function(newValue, info) {\n    this.props.onChange(this.props.index, newValue, info);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fieldElem = config.createFieldElement({\n      field,\n      onChange: this.onChangeField,\n      plain: true,\n      onAction: this.onBubbleAction,\n    });\n\n    return (\n      <div\n        renderWith={this.renderWith('ListItemValue')}\n        className={cx(this.props.classes)}\n      >\n        {fieldElem}\n      </div>\n    );\n  },\n});\n","// # assoc-item component\n\n/*\nRender an object item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'AssocListItem',\n\n  mixins: [HelperMixin],\n\n  onChangeKey: function(newKey) {\n    this.props.onChangeKey(this.props.index, newKey);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const assocListItemKey = config.createElement('assoc-list-item-key', {\n      parentTypeName: this.props.parentTypeName,\n      field,\n      onChange: this.onChangeKey,\n      onAction: this.onBubbleAction,\n      displayKey: this.props.displayKey,\n      isDuplicateKey: this.props.isDuplicateKey,\n    });\n\n    const assocListItemValue = config.createElement('assoc-list-item-value', {\n      parentTypeName: this.props.parentTypeName,\n      field,\n      onChange: this.props.onChange,\n      onAction: this.onBubbleAction,\n      index: this.props.index,\n    });\n\n    const assocListItemControl = config.createElement(\n      'assoc-list-item-control',\n      {\n        parentTypeName: this.props.parentTypeName,\n        field,\n        onRemove: this.props.onRemove,\n        index: this.props.index,\n      }\n    );\n\n    return (\n      <div\n        renderWith={this.renderWith('ListItem')}\n        className={cx(this.props.classes)}\n      >\n        {assocListItemKey}\n        {assocListItemValue}\n        {assocListItemControl}\n      </div>\n    );\n  },\n});\n","// # ChoiceSectionHeader component\n\n/*\nRender section header in choices dropdown\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ChoiceSectionHeader',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const choice = this.props.choice;\n    return (\n      <span\n        renderWith={this.renderWith('ChoiceSectionHeader')}\n        className={cx(this.props.classes)}\n      >\n        {choice.label}\n      </span>\n    );\n  },\n});\n","// # choice component\n\n/*\nA single choice in a list of choices.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\nimport { ref } from '../../utils';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  // This component also renders InfoChoice, ActionChoice, and SectionChoice.\n  displayName: 'Choice',\n\n  mixins: [HelperMixin],\n\n  render() {\n    return this.renderWithConfig();\n  },\n\n  onSelect() {\n    this.props.onSelect(this.props.choice);\n  },\n\n  sampleString(sample) {\n    if (typeof sample === 'boolean') {\n      return String(sample);\n    }\n    return sample;\n  },\n\n  renderDefault: function() {\n    const { choice, label, field } = this.props;\n\n    const anchorClasses =\n      cx(\n        {\n          'action-choice': choice.action,\n        },\n        choice.action\n      ) || undefined;\n\n    const labelClasses = cx('choice-label', choice.action);\n\n    return (\n      // Keyboard accessible with up/down arrows.\n      // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n      <a\n        renderWith={this.renderWith('Choice')}\n        role=\"option\"\n        style={{ cursor: 'pointer' }}\n        onClick={this.onSelect}\n        className={anchorClasses}\n      >\n        {choice.sectionKey ? (\n          this.props.config.createElement('choice-section-header', {\n            typeName: this.props.typeName,\n            field,\n            choice,\n            isOpen: this.props.isOpen,\n            isDisabled: this.props.isDisabled,\n          })\n        ) : (\n          <React.Fragment>\n            <span\n              renderWith={this.renderWith('ChoiceLabel')}\n              ref={ref(this, 'label')}\n              className={labelClasses}\n            >\n              {label || choice.label}\n            </span>\n            {choice.action ? (\n              this.props.config.createElement('choice-action-sample', {\n                typeName: this.props.typeName,\n                field,\n                action: choice.action,\n                choice,\n              })\n            ) : label ? null : (\n              <span\n                renderWith={this.renderWith('ChoiceSample')}\n                className=\"choice-sample\"\n              >\n                {this.sampleString(choice.sample)}\n              </span>\n            )}\n          </React.Fragment>\n        )}\n      </a>\n    );\n  },\n});\n","// # choices-item component\n\n/*\n   Render a choice item wrapper.\n */\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ChoicesItem',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const classes = _.extend({}, this.props.classes);\n\n    classes.choice = true;\n    if (this.props.isHovering) {\n      classes.hover = true;\n    }\n\n    return (\n      <li renderWith={this.renderWith('ChoicesItem')} className={cx(classes)}>\n        {this.props.children}\n      </li>\n    );\n  },\n});\n","// # choices-search component\n\n/*\n   Render a search box for choices.\n */\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport HelperMixin from '../../mixins/helper';\nimport { ref } from '../../utils';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'ChoicesSearch',\n\n  mixins: [HelperMixin],\n\n  focus() {\n    this.inputRef.focus();\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <div\n        renderWith={this.renderWith('ChoicesSearch')}\n        className=\"choices-search\"\n      >\n        <input\n          renderWith={this.renderWith('ChoicesSearchInput')}\n          ref={ref(this, 'input')}\n          type=\"text\"\n          placeholder=\"Search...\"\n          onChange={this.props.onChange}\n        />\n      </div>\n    );\n  },\n});\n","// # Choices component\n\n/*\nRender customized (non-native) dropdown choices.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport ReactDOM from 'react-dom';\nimport ScrollLock from 'react-scroll-lock';\n\nimport _ from '../../undash';\nimport { keyCodes, ref, scrollIntoContainerView } from '../../utils';\nimport HelperMixin from '../../mixins/helper';\nimport ClickOutsideMixin from '../../mixins/click-outside';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nconst magicChoiceRe = /^\\/\\/\\/[^/]+\\/\\/\\/$/;\n\nconst keyCodeToDirection = {\n  [keyCodes.UP]: -1,\n  [keyCodes.DOWN]: 1,\n};\n\nconst requestAnimationFrameThrottled = (frameCount = 1, cb) => {\n  if (frameCount < 1) {\n    frameCount = 1;\n  }\n  let frameIndex = 0;\n  const listenToFrame = () => {\n    requestAnimationFrame((...args) => {\n      frameIndex++;\n      if (frameIndex === frameCount) {\n        cb(...args);\n      } else {\n        listenToFrame();\n      }\n    });\n  };\n  listenToFrame();\n};\n\nconst getInitiallyOpenSections = (choices = []) =>\n  choices\n    .filter(choice => choice.sectionKey && choice.initialState === 'open')\n    .map(choice => choice.sectionKey);\n\nconst choiceTypes = [\n  {\n    test: choice => choice.value === '///loading///',\n    name: 'info-choice',\n    value: () => 'loading',\n    props: component => ({\n      onSelect: component.onClose,\n      label: component.props.config.createElement('loading-choice', {\n        typeName: component.props.typeName,\n        field: component.props.field,\n      }),\n    }),\n  },\n  {\n    test: choice => choice.value === '///empty///',\n    name: 'info-choice',\n    value: () => 'empty',\n    props: component => ({\n      onSelect: component.onClose,\n      label: 'No choices available.',\n    }),\n  },\n  {\n    test: choice => choice.action,\n    name: 'action-choice',\n    value: choice => `action:${choice.action}`,\n    props: (component, choice) => ({\n      onSelect: component.onChoiceAction,\n      label:\n        choice.label || component.props.config.actionChoiceLabel(choice.action),\n    }),\n  },\n  {\n    test: choice => choice.sectionKey,\n    name: 'section-choice',\n    value: choice => `section:${choice.sectionKey}`,\n    props: (component, choice, info) => ({\n      onSelect: () => component.onHeaderClick(choice),\n      isOpen: component.state.openSections.indexOf(choice.sectionKey) !== -1,\n      isDisabled: info.hasDisabledSections,\n    }),\n  },\n  {\n    test: () => true,\n    name: 'choice',\n    value: choice => `value:${choice.value}`,\n  },\n];\n\nconst findChoiceType = choice => {\n  for (let i = 0; i < choiceTypes.length; i++) {\n    const type = choiceTypes[i];\n    if (type.test(choice)) {\n      return type;\n    }\n  }\n  // Should never reach this.\n  return choiceTypes[choiceTypes.length - 1];\n};\n\nexport default createReactClass({\n  displayName: 'Choices',\n\n  mixins: [HelperMixin, ClickOutsideMixin, ScrollLock],\n\n  // return new set of open sections, when user clicks on section header with sectionKey\n  getNextOpenSections(sectionKey) {\n    const { canOpenMultipleSections } = this.props;\n    const { openSections } = this.state;\n\n    if (openSections.indexOf(sectionKey) === -1) {\n      // currently closed, so open it:\n      if (canOpenMultipleSections) {\n        // open this section, leave others alone:\n        return openSections.concat([sectionKey]);\n      } else {\n        // open this section, close all others:\n        return [sectionKey];\n      }\n    } else {\n      // currently open, so close it (ie remove it from the list of open sections):\n      return openSections.filter(key => sectionKey !== key);\n    }\n  },\n\n  getInitialState: function() {\n    return {\n      maxHeight: null,\n      open: this.props.open,\n      searchString: '',\n      hoverValue: null,\n      openSections: getInitiallyOpenSections(this.props.choices),\n    };\n  },\n\n  getIgnoreCloseNodes: function() {\n    if (!this.props.ignoreCloseNodes) {\n      return [];\n    }\n    let nodes = this.props.ignoreCloseNodes();\n    if (!_.isArray(nodes)) {\n      nodes = [nodes];\n    }\n    return nodes;\n  },\n\n  componentDidMount: function() {\n    this.setOnClickOutside(\n      'container',\n      function(event) {\n        // Make sure we don't find any nodes to ignore.\n        if (\n          !_.find(\n            this.getIgnoreCloseNodes(),\n            function(node) {\n              return this.isNodeInside(event.target, node);\n            }.bind(this)\n          )\n        ) {\n          this.onClose();\n        }\n      }.bind(this)\n    );\n\n    if (this.searchRef) {\n      this.searchRef.focus();\n    }\n\n    this.adjustSize();\n    this.updateListeningToWindow();\n  },\n\n  componentWillUnmount: function() {\n    this.stopListeningToWindow();\n  },\n\n  onSelect: function(choice, event) {\n    this.setState({\n      openSections: getInitiallyOpenSections(this.props.choices),\n      searchString: '',\n    });\n    this.props.onSelect(choice.value, event);\n  },\n\n  onChoiceAction: function(choice) {\n    this.setState({\n      openSections: getInitiallyOpenSections(this.props.choices),\n      searchString: choice.keepSearchString ? this.state.searchString : '',\n    });\n    this.props.onChoiceAction(choice);\n  },\n\n  onClose: function() {\n    this.setState({\n      openSections: getInitiallyOpenSections(this.props.choices),\n      searchString: '',\n    });\n    this.props.onClose();\n  },\n\n  // Doing something a little crazy... measuring on every frame. Makes this smoother than using an interval.\n  // Can't using scrolling events, because we might be scrolling inside a container instead of the body.\n  // Shouldn't be any more costly than animations though, I think. And only one of these is open at a time.\n  updateListeningToWindow: function() {\n    if (this.choicesRef) {\n      if (!this.isListening) {\n        const listenToFrame = () => {\n          requestAnimationFrameThrottled(3, () => {\n            if (this.isListening) {\n              // Make sure we don't adjust again before rendering.\n              this.adjustSize(() => {\n                if (this.isListening) {\n                  listenToFrame();\n                }\n              });\n            }\n          });\n        };\n        this.isListening = true;\n        listenToFrame();\n      }\n    } else {\n      if (this.isListening) {\n        this.stopListeningToWindow();\n      }\n    }\n  },\n\n  stopListeningToWindow: function() {\n    if (this.isListening) {\n      this.isListening = false;\n    }\n  },\n\n  adjustSize: function(cb) {\n    let didSetState = false;\n    if (this.choicesRef) {\n      const node = this.containerRef;\n      const rect = node.getBoundingClientRect();\n      const top = rect.top;\n      const windowHeight = window.innerHeight;\n      const height = windowHeight - top;\n      if (height !== this.state.maxHeight) {\n        didSetState = true;\n        this.setState(\n          {\n            maxHeight: height,\n          },\n          cb\n        );\n      }\n    }\n    if (!didSetState) {\n      if (cb) {\n        cb();\n      }\n    }\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    const isOpening = !this.props.open && nextProps.open;\n\n    const nextState = {\n      open: nextProps.open,\n      openSections: getInitiallyOpenSections(nextProps.choices),\n    };\n\n    // For now, erase hover value when opening. Maybe get smarter about this later.\n    if (isOpening) {\n      nextState.hoverValue = null;\n    }\n\n    const isSearchOpening = this.isSearchOpening(nextProps);\n\n    this.setState(nextState, () => {\n      if (isOpening || isSearchOpening) {\n        if (this.searchRef) {\n          this.searchRef.focus();\n        }\n      }\n      this.adjustSize();\n      this.updateListeningToWindow();\n    });\n  },\n\n  onHeaderClick: function(choice) {\n    this.setState(\n      {\n        openSections: this.getNextOpenSections(choice.sectionKey),\n      },\n      this.adjustSize\n    );\n  },\n\n  hasOneSection: function() {\n    const sectionHeaders = this.props.choices.filter(function(c) {\n      return c.sectionKey;\n    });\n    return sectionHeaders.length < 2;\n  },\n\n  visibleChoices(...args) {\n    return this.visibleChoicesInfo(...args).choices;\n  },\n\n  visibleChoicesInfo(props = this.props) {\n    let choices = props.choices;\n    const config = props.config;\n\n    if (choices && choices.length === 0) {\n      return {\n        choices: [{ value: '///empty///' }],\n        hasDisabledSections: true,\n      };\n    }\n\n    if (this.state.searchString) {\n      choices = choices.filter(choice => {\n        if (choice.sectionKey) {\n          return true;\n        }\n        return config.isSearchStringInChoice(this.state.searchString, choice);\n      });\n    }\n\n    choices = config.sortChoices(choices, this.state.searchString);\n\n    if (!props.isAccordion) {\n      return {\n        choices,\n        hasDisabledSections: true,\n      };\n    }\n\n    const openSections = this.state.openSections;\n    const alwaysExanded =\n      (!props.isAccordionAlwaysCollapsable && this.hasOneSection()) ||\n      this.state.searchString;\n    const visibleChoices = [];\n    let isInOpenSection;\n    let isInSection = false;\n\n    choices.forEach(function(choice) {\n      if (choice.sectionKey) {\n        isInSection = true;\n        isInOpenSection = openSections.indexOf(choice.sectionKey) !== -1;\n      } else if (_.isNull(choice.sectionKey)) {\n        isInSection = false;\n      }\n      if (choice.value && String(choice.value).match(magicChoiceRe)) {\n        visibleChoices.push(choice);\n      } else if (\n        alwaysExanded ||\n        choice.sectionKey ||\n        isInOpenSection ||\n        !isInSection\n      ) {\n        visibleChoices.push(choice);\n      }\n    });\n\n    return {\n      choices: visibleChoices,\n      hasDisabledSections: alwaysExanded,\n    };\n  },\n\n  hasSearch(visibleChoices = this.visibleChoices(), props = this.props) {\n    if (!props.config.fieldHasSearch(props.field)) {\n      return false;\n    }\n\n    let hasSearch = !!this.state.searchString;\n\n    if (!hasSearch) {\n      if (props.choices.length > 2) {\n        if (\n          _.find(\n            visibleChoices,\n            choice => !choice.action && choice.value !== '///loading///'\n          )\n        ) {\n          hasSearch = true;\n        }\n      }\n    }\n\n    return hasSearch;\n  },\n\n  isSearchOpening(nextProps) {\n    if (this.props.choices.length < nextProps.choices.length) {\n      const prevHasSearch = this.hasSearch(this.visibleChoices());\n      const nextHasSearch = this.hasSearch(\n        this.visibleChoices(nextProps),\n        nextProps\n      );\n      if (nextHasSearch && !prevHasSearch) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  onClick: function(event) {\n    // swallow clicks\n    event.stopPropagation();\n  },\n\n  onChangeSearch: function(event) {\n    this.setState({\n      searchString: event.target.value,\n    });\n  },\n\n  choiceValue(choice) {\n    if (choice.value === '///loading///') {\n      return 'loading';\n    } else if (choice.value === '///empty///') {\n      return 'empty';\n    } else if (choice.action) {\n      return `action:${choice.action}`;\n    } else if (choice.sectionKey) {\n      return `section:${choice.sectionKey}`;\n    } else {\n      return `value:${choice.value}`;\n    }\n  },\n\n  // Receive keydown events from parent. Really, this component should be\n  // ripped apart into a stateless component, but much refactoring to be done\n  // for that.\n  onKeyDown(event) {\n    const direction =\n      event.keyCode in keyCodeToDirection\n        ? keyCodeToDirection[event.keyCode]\n        : 0;\n\n    if (direction !== 0 || event.keyCode === keyCodes.ENTER) {\n      const visibleChoices = this.visibleChoices();\n      const { hoverValue } = this.state;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (direction !== 0) {\n        if (visibleChoices) {\n          let hoverIndex = -1;\n          if (hoverValue === 'search') {\n            hoverIndex = -1;\n          } else {\n            _.find(visibleChoices, (choice, i) => {\n              if (hoverValue === this.choiceValue(choice)) {\n                hoverIndex = i;\n                return true;\n              }\n\n              return false;\n            });\n          }\n          let nextHoverIndex = hoverIndex + direction;\n          if (nextHoverIndex < 0) {\n            nextHoverIndex = 0;\n            if (this.containerRef) {\n              const containerNode = ReactDOM.findDOMNode(this.containerRef);\n              containerNode.scrollTop = 0;\n            }\n          } else if (nextHoverIndex + 1 > visibleChoices.length) {\n            nextHoverIndex = visibleChoices.length - 1;\n          }\n          const nextHoverComponent = this[`choice-${nextHoverIndex}Ref`];\n          if (nextHoverComponent && this.containerRef) {\n            const node = ReactDOM.findDOMNode(nextHoverComponent);\n            const containerNode = ReactDOM.findDOMNode(this.containerRef);\n            scrollIntoContainerView(node, containerNode);\n          }\n          const nextHoverValue =\n            nextHoverIndex > -1\n              ? this.choiceValue(visibleChoices[nextHoverIndex])\n              : 'search';\n          if (nextHoverValue === 'search') {\n            if (this.searchRef) {\n              this.searchRef.focus();\n            }\n          }\n          this.setState({\n            hoverValue: nextHoverValue,\n          });\n        }\n      }\n\n      if (event.keyCode === keyCodes.ENTER) {\n        const selectedChoice = _.find(\n          visibleChoices,\n          choice => this.choiceValue(choice) === hoverValue\n        );\n        if (selectedChoice) {\n          if (this.props.onFocusSelect) {\n            this.props.onFocusSelect();\n          }\n          if (hoverValue.indexOf('value:') === 0) {\n            this.onSelect(selectedChoice, event);\n          } else if (selectedChoice.action) {\n            this.onChoiceAction(selectedChoice);\n          } else if (selectedChoice.sectionKey) {\n            this.onHeaderClick(selectedChoice);\n          } else {\n            this.onClose();\n          }\n        }\n      }\n    }\n  },\n\n  renderDefault: function() {\n    if (!this.props.open) {\n      return null;\n    }\n\n    const config = this.props.config;\n\n    const { choices, hasDisabledSections } = this.visibleChoicesInfo();\n\n    const info = { hasDisabledSections };\n\n    let search = null;\n\n    const hasSearch = this.hasSearch(choices);\n\n    if (hasSearch) {\n      search = config.createElement('choices-search', {\n        typeName: this.props.typeName,\n        ref: ref(this, 'search'),\n        key: 'choices-search',\n        field: this.props.field,\n        onChange: this.onChangeSearch,\n      });\n    }\n\n    return (\n      <div\n        renderWith={this.renderWith('Choices')}\n        role=\"presentation\"\n        ref={ref(this, 'container')}\n        onClick={this.onClick}\n        className=\"choices-container\"\n        style={{\n          userSelect: 'none',\n          WebkitUserSelect: 'none',\n          position: 'absolute',\n          maxHeight: this.state.maxHeight ? this.state.maxHeight : null,\n        }}\n      >\n        {search}\n        <ul\n          renderWith={this.renderWith('ChoicesList')}\n          key=\"choices\"\n          ref={ref(this, 'choices')}\n          className=\"choices\"\n        >\n          {choices.map((choice, i) => {\n            const choiceType = findChoiceType(choice);\n            const choiceValue = choiceType.value(choice);\n            const choiceProps = {\n              typeName: this.props.typeName,\n              onSelect: this.onSelect,\n              choice,\n              field: this.props.field,\n              index: i,\n              total: choices.length,\n            };\n            if (choiceType.props) {\n              _.extend(choiceProps, choiceType.props(this, choice, info));\n            }\n            const choiceElement = config.createElement(\n              choiceType.name,\n              choiceProps\n            );\n\n            return config.createElement(\n              'choices-item',\n              {\n                typeName: this.props.typeName,\n                field: this.props.field,\n                ref: ref(this, `choice-${i}`),\n                key: i,\n                isHovering:\n                  this.state.hoverValue &&\n                  this.state.hoverValue === choiceValue,\n              },\n              choiceElement\n            );\n          })}\n        </ul>\n      </div>\n    );\n  },\n});\n","// # field-template-choices component\n\n/*\nGive a list of choices of item types to create as children of an field.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'FieldTemplateChoices',\n\n  mixins: [HelperMixin],\n\n  onChange: function(event) {\n    this.props.onSelect(parseInt(event.target.value));\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n\n    const fieldTemplates = config.fieldItemFieldTemplates(field);\n\n    return fieldTemplates.length < 2 ? null : (\n      <select\n        renderWith={this.renderWith('FieldTemplateChoicesSelectInput')}\n        className={cx(this.props.classes)}\n        value={this.fieldTemplateIndex}\n        onChange={this.onChange}\n      >\n        {fieldTemplates.map((fieldTemplate, i) => (\n          <option\n            renderWith={this.renderWith('FieldTemplateChoicesOption')}\n            key={i}\n            value={i}\n          >\n            {fieldTemplate.label || i}\n          </option>\n        ))}\n      </select>\n    );\n  },\n});\n","// # field component\n\n/*\nUsed by any fields to put the label and help text around the field.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport _ from '../../undash';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Field',\n\n  mixins: [HelperMixin],\n\n  getInitialState: function() {\n    return {\n      collapsed: this.props.config.fieldIsCollapsed(this.props.field)\n        ? true\n        : false,\n    };\n  },\n\n  onClickLabel: function() {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n\n    if (this.props.plain) {\n      return this.props.children;\n    }\n\n    const field = this.props.field;\n\n    let index = this.props.index;\n    if (!_.isNumber(index)) {\n      const key = this.props.field.key;\n      index = _.isNumber(key) ? key : undefined;\n    }\n\n    const classes = _.extend({}, this.props.classes);\n\n    const errors = config.fieldErrors(field);\n\n    errors.forEach(function(error) {\n      classes['validation-error-' + error.type] = true;\n    });\n\n    if (config.fieldIsRequired(field)) {\n      classes.required = true;\n    } else {\n      classes.optional = true;\n    }\n\n    if (this.isReadOnly()) {\n      classes.readonly = true;\n    }\n\n    const label = config.createElement('label', {\n      typeName: this.props.typeName,\n      config,\n      field,\n      index,\n      onClick: config.fieldIsCollapsible(field) ? this.onClickLabel : null,\n    });\n\n    const content = config.cssTransitionWrapper(\n      this.state.collapsed\n        ? [label]\n        : [\n            config.createElement(\n              'field-body',\n              {\n                typeName: this.props.typeName,\n                config,\n                label,\n                help: config.createElement('help', {\n                  typeName: this.props.typeName,\n                  config,\n                  field,\n                  key: 'help',\n                }),\n                key: 'field-body',\n              },\n              this.props.children\n            ),\n          ]\n    );\n\n    return (\n      <div\n        renderWith={this.renderWith('Field')}\n        className={cx(classes)}\n        style={{ display: field.hidden ? 'none' : '' }}\n      >\n        {content}\n      </div>\n    );\n  },\n});\n","// # help component\n\n/*\nJust the help text block.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Help',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const helpText = this.props.config.fieldHelpText(this.props.field);\n\n    return helpText ? (\n      <div\n        renderWith={this.renderWith('Help')}\n        className={cx(this.props.classes)}\n        dangerouslySetInnerHTML={{ __html: helpText }}\n      />\n    ) : (\n      <span renderWith={this.renderWith('EmptyHelp')} />\n    );\n  },\n});\n","'use strict';\n\n// # button component\n\n/*\n  Clickable 'button'\n*/\n\nimport PropTypes from 'prop-types';\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'InsertButton',\n\n  propTypes: {\n    onClick: PropTypes.func.isRequired,\n  },\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <a\n        renderWith={this.renderWith('InsertButton')}\n        href={'JavaScript' + ':'}\n        onClick={this.props.onClick}\n        className={cx({ 'readonly-control': this.props.readOnly })}\n      >\n        {this.props.children}\n      </a>\n    );\n  },\n});\n","// # label component\n\n/*\nJust the label for a field.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Label',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const fieldLabel = config.fieldLabel(field);\n    const requiredLabel = config.createElement('required-label', {\n      typeName: this.props.typeName,\n      config,\n      field,\n    });\n    let label = null;\n\n    if (typeof this.props.index === 'number') {\n      label = '' + (this.props.index + 1) + '.';\n\n      if (fieldLabel) {\n        label = label + ' ' + fieldLabel;\n      }\n    }\n\n    if (fieldLabel || label) {\n      let text = label || fieldLabel;\n\n      if (this.props.onClick) {\n        text = (\n          <a\n            renderWith={this.renderWith('LabelLink')}\n            href={'JavaScript' + ':'}\n            onClick={this.props.onClick}\n          >\n            {text}\n          </a>\n        );\n      }\n\n      label = <label renderWith={this.renderWith('LabelText')}>{text}</label>;\n    }\n\n    return (\n      <div\n        renderWith={this.renderWith('Label')}\n        className={cx(this.props.classes)}\n      >\n        {label} {requiredLabel}\n      </div>\n    );\n  },\n});\n","'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'LoadingChoice',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <span renderWith={this.renderWith('LoadingChoice')}>\n        Loading choices...\n      </span>\n    );\n  },\n});\n","'use strict';\n\nimport createReactClass from 'create-react-class';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'LoadingChoices',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <div renderWith={this.renderWith('LoadingChoices')}>\n        Loading choices...\n      </div>\n    );\n  },\n});\n","// # move-item-back component\n\n/*\nButton to move an item backwards in list.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'MoveItemBack',\n\n  mixins: [HelperMixin],\n\n  getDefaultProps: function() {\n    return {\n      label: '▲',\n    };\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <button\n        renderWith={this.renderWith('MoveItemBack')}\n        tabIndex={0}\n        className={cx(this.props.classes)}\n        onClick={this.props.onClick}\n      >\n        {this.props.label}\n      </button>\n    );\n  },\n});\n","// # move-item-forward component\n\n/*\nButton to move an item forward in a list.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'MoveItemForward',\n\n  mixins: [HelperMixin],\n\n  getDefaultProps: function() {\n    return {\n      label: '▼',\n    };\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    return (\n      <button\n        renderWith={this.renderWith('MoveItemForward')}\n        tabIndex={0}\n        className={cx(this.props.classes)}\n        onClick={this.props.onClick}\n      >\n        {this.props.label}\n      </button>\n    );\n  },\n});\n","// # pretty-select-input component\n\n/*\n   Render an input to be used as the element for typing a custom value into a pretty select.\n */\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport { ref } from '../../utils';\n\nimport HelperMixin from '../../mixins/helper';\n\nexport default createReactClass({\n  displayName: 'PrettySelectInput',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  focus: function() {\n    if (this.textBoxRef && this.textBoxRef.focus) {\n      this.textBoxRef.focus();\n    }\n  },\n\n  setChoicesOpen: function(isOpenChoices) {\n    this.textBoxRef.setChoicesOpen(isOpenChoices);\n  },\n\n  renderDefault: function() {\n    return this.props.config.createElement('pretty-text-input', {\n      typeName: this.props.typeName,\n      ref: ref(this, 'textBox'),\n      classes: this.props.classes,\n      onChange: this.props.onChange,\n      onFocus: this.props.onFocus,\n      onBlur: this.props.onBlur,\n      onAction: this.onBubbleAction,\n      field: this.props.field,\n      value: this.props.isEnteringCustomValue\n        ? this.props.field.value\n        : this.props.getDisplayValue(),\n      selectedChoices: this.props.config.fieldSelectedReplaceChoices(\n        this.props.field\n      ),\n      replaceChoices: this.props.config.fieldReplaceChoices(this.props.field),\n      onTagClick: this.onTagClick,\n      readOnly: !this.props.isEnteringCustomValue,\n      disabled: this.isReadOnly(),\n    });\n  },\n});\n","// # pretty-select-value component\n\n/*\n   Render a select dropdown for a list of choices. Choices values can be of any\n   type. Does not use native select dropdown. Choices can optionally include\n   'sample' property displayed grayed out.\n */\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport _ from '../../undash';\nimport cx from 'classnames';\n\nimport { focusRefNode, keyCodes, ref } from '../../utils';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'SelectValue',\n\n  mixins: [HelperMixin],\n\n  onChange: function(event) {\n    const choiceValue = event.target.value;\n    const choiceType = choiceValue.substring(0, choiceValue.indexOf(':'));\n    if (choiceType === 'choice') {\n      let choiceIndex = choiceValue.substring(choiceValue.indexOf(':') + 1);\n      choiceIndex = parseInt(choiceIndex);\n      this.props.onChange(this.props.choices[choiceIndex].value);\n    }\n  },\n\n  onChangeCustomValue: function(newValue, info) {\n    this.props.onChange(newValue, {\n      field: info.field,\n      isCustomValue: true,\n    });\n  },\n\n  // Intercept custom value field events and pretend like this field sent them.\n  onCustomAction: function(info) {\n    info = _.extend({}, info, { field: this.props.field, isCustomValue: true });\n    this.props.onAction(info);\n  },\n\n  getDefaultProps: function() {\n    return {\n      choices: [],\n    };\n  },\n\n  getInitialState: function() {\n    const currentChoice = this.currentChoice(this.props);\n    const isDefaultValue =\n      this.props.field.value ===\n      this.props.config.fieldTemplateDefaultValue(this.props.field);\n    return {\n      isChoicesOpen: this.props.isChoicesOpen,\n      isEnteringCustomValue:\n        !isDefaultValue && !currentChoice && this.props.field.value,\n      // Caching this cause it's kind of expensive.\n      currentChoice: this.currentChoice(this.props),\n      hoverIndex: -1,\n    };\n  },\n\n  componentWillReceiveProps(newProps) {\n    const currentChoice = this.currentChoice(newProps);\n    this.setState({\n      currentChoice,\n    });\n  },\n\n  onKeyDown(event) {\n    if (!this.isReadOnly()) {\n      if (event.keyCode === keyCodes.ESC) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.state.isChoicesOpen) {\n          this.onToggleChoices();\n          this.onFocus();\n        }\n      } else if (!this.state.isChoicesOpen) {\n        if (!this.state.isEnteringCustomValue) {\n          if (\n            event.keyCode === keyCodes.UP ||\n            event.keyCode === keyCodes.DOWN ||\n            event.keyCode === keyCodes.ENTER\n          ) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.onToggleChoices();\n          }\n        }\n      } else {\n        if (this.choicesRef && this.choicesRef.onKeyDown) {\n          this.choicesRef.onKeyDown(event);\n        }\n      }\n    }\n  },\n\n  value: function(props) {\n    props = props || this.props;\n    return props.field.value !== undefined ? props.field.value : '';\n  },\n\n  onFocus() {\n    focusRefNode(this.containerRef);\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const { config, field } = this.props;\n    let choices = config.normalizePrettyChoices(this.props.choices);\n\n    if (\n      (choices.length > 1 && choices[0].value === '///loading///') ||\n      config.fieldIsLoading(field)\n    ) {\n      choices = [{ value: '///loading///' }];\n    }\n\n    let choicesElem;\n    if (!this.isReadOnly()) {\n      choicesElem = config.createElement('choices', {\n        typeName: this.props.typeName,\n        ref: ref(this, 'choices'),\n        choices,\n        open: this.state.isChoicesOpen,\n        ignoreCloseNodes: this.getCloseIgnoreNodes,\n        onSelect: this.onSelectChoice,\n        onClose: this.onCloseChoices,\n        onChoiceAction: this.onChoiceAction,\n        field,\n        isAccordion: field.isAccordion,\n        isAccordionAlwaysCollapsable: field.isAccordionAlwaysCollapsable,\n        hoverIndex: this.state.hoverIndex,\n        onFocusSelect: this.onFocus,\n      });\n    }\n\n    const inputElem = this.getInputElement();\n\n    let customFieldElement = null;\n    if (this.state.isEnteringCustomValue && this.hasCustomField()) {\n      const customFieldTemplate = this.getCustomField();\n      const customField = _.extend(\n        { type: 'PrettyText' },\n        {\n          key: field.key,\n          parent: field,\n          fieldIndex: field.fieldIndex,\n          rawFieldTemplate: customFieldTemplate,\n          value: field.value,\n        },\n        customFieldTemplate\n      );\n      config.initField(customField);\n      customFieldElement = config.createFieldElement({\n        field: customField,\n        onChange: this.onChangeCustomValue,\n        onAction: this.onCustomAction,\n        ref: ref(this, 'customFieldInput'),\n      });\n    }\n\n    let selectArrow;\n    if (!this.isReadOnly() || this.hasReadOnlyControls()) {\n      selectArrow = (\n        <span\n          renderWith={this.renderWith('SelectArrow', {\n            isOpen: this.state.isChoicesOpen,\n          })}\n          className={cx('select-arrow', {\n            'readonly-control': this.isReadOnly(),\n          })}\n        />\n      );\n    }\n\n    const choicesOrLoading = (\n      <div\n        renderWith={this.renderWith('ChoicesWrapper')}\n        role=\"listbox\"\n        ref={ref(this, 'container')}\n        tabIndex=\"0\"\n        onKeyDown={this.onKeyDown}\n        className={cx(\n          _.extend({}, this.props.classes, {\n            'choices-open': this.state.isChoicesOpen,\n          })\n        )}\n        onChange={this.onChange}\n      >\n        <div\n          renderWith={this.renderWith('ChoicesInputWrapper')}\n          ref={ref(this, 'toggle')}\n          onClick={this.isReadOnly() ? null : this.onToggleChoices}\n        >\n          {inputElem}\n          {selectArrow}\n        </div>\n        {choicesElem}\n        <span renderWith={this.renderWith('CustomValueWrapper')}>\n          {customFieldElement}\n        </span>\n      </div>\n    );\n\n    return choicesOrLoading;\n  },\n\n  getInputElement: function() {\n    return this.props.config.createElement('pretty-select-input', {\n      typeName: this.props.typeName,\n      field: this.props.field,\n      ref: ref(this, 'customInput'),\n      isEnteringCustomValue:\n        this.state.isEnteringCustomValue && !this.hasCustomField(),\n      onChange: this.onInputChange,\n      onFocus: this.onFocusAction,\n      onBlur: this.onBlur,\n      onAction: this.onBubbleAction,\n      getDisplayValue: this.getDisplayValue,\n    });\n  },\n\n  blurLater: function() {\n    const self = this;\n    setTimeout(function() {\n      self.onBlurAction();\n    }, 0);\n  },\n\n  onBlur: function() {\n    if (!this.state.isChoicesOpen) {\n      this.blurLater();\n    }\n  },\n\n  getCloseIgnoreNodes: function() {\n    return this.toggleRef;\n  },\n\n  onToggleChoices: function() {\n    this.setChoicesOpen(!this.state.isChoicesOpen);\n  },\n\n  setChoicesOpen: function(isOpen) {\n    const action = isOpen ? 'open-choices' : 'close-choices';\n    this.onStartAction(action);\n    this.setState({ isChoicesOpen: isOpen });\n  },\n\n  onSelectChoice: function(value) {\n    this.onStartAction('exit-custom-value');\n    this.setState({\n      isEnteringCustomValue: false,\n      isChoicesOpen: false,\n    });\n    this.props.onChange(value);\n    this.blurLater();\n  },\n\n  onCloseChoices: function() {\n    if (this.state.isChoicesOpen) {\n      this.blurLater();\n      this.setChoicesOpen(false);\n    }\n  },\n\n  currentChoice: function(props) {\n    props = props || this.props;\n    const { config, field, choices } = props;\n    const currentValue = this.value(props);\n    let currentChoice = config.fieldSelectedChoice(field);\n    // Make sure selectedChoice is a match for current value.\n    if (currentChoice && currentChoice.value !== currentValue) {\n      currentChoice = null;\n    }\n    if (!currentChoice) {\n      currentChoice = _.find(choices, function(choice) {\n        return !choice.action && choice.value === currentValue;\n      });\n    }\n    return currentChoice;\n  },\n\n  getDisplayValue: function() {\n    const { currentChoice } = this.state;\n    //var currentChoice = this.currentChoice();\n    const currentValue = this.value();\n    const isDefaultValue =\n      currentValue ===\n      this.props.config.fieldTemplateDefaultValue(this.props.field);\n\n    if (\n      this.state.isEnteringCustomValue ||\n      (!isDefaultValue && !currentChoice && currentValue)\n    ) {\n      if (this.hasCustomField()) {\n        const { choices, config } = this.props;\n        const customChoice = _.find(\n          choices,\n          choice => choice.action === 'enter-custom-value'\n        );\n        return (\n          config.customChoiceDisplayValue(customChoice, currentValue) ||\n          currentValue\n        );\n      }\n      return currentValue;\n    }\n\n    if (currentChoice) {\n      return currentChoice.label;\n    }\n\n    // If this is the default value, and we have no choice to use for the label, just use the value.\n    if (isDefaultValue) {\n      return currentValue;\n    }\n\n    return '';\n  },\n\n  hasCustomField() {\n    // Supporting custom values without a separate custom field is no longer supported.\n    return true;\n  },\n\n  getCustomField() {\n    const { config, field } = this.props;\n    return (\n      config.fieldCustomFieldTemplate(field) || {\n        label: `Custom Value`,\n        helpText: null,\n        required: config.fieldIsRequired(field),\n      }\n    );\n  },\n\n  onChoiceAction: function(choice) {\n    if (choice.action === 'enter-custom-value') {\n      this.setState(\n        {\n          isEnteringCustomValue: true,\n          isChoicesOpen: false,\n        },\n        function() {\n          if (this.hasCustomField()) {\n            if (this.customFieldInputRef && this.customFieldInputRef.focus) {\n              this.customFieldInputRef.focus();\n            }\n          } else {\n            if (this.customInputRef && this.customInputRef.focus) {\n              this.customInputRef.focus();\n            }\n          }\n        }\n      );\n    } else if (choice.action === 'insert-field') {\n      this.setState(\n        {\n          isChoicesOpen: false,\n        },\n        function() {\n          this.customInputRef.setChoicesOpen(true);\n        }\n      );\n    } else {\n      if (choice.action === 'clear-current-choice') {\n        this.onStartAction('exit-custom-value');\n        this.setState({\n          isChoicesOpen: false,\n          isEnteringCustomValue: false,\n        });\n        this.props.onChange('');\n      } else {\n        this.setState({\n          isChoicesOpen: !!choice.isOpen,\n        });\n      }\n    }\n\n    this.onStartAction(choice.action, choice);\n  },\n\n  onInputChange: function(value) {\n    this.props.onChange(value);\n  },\n});\n","'use strict';\n\n// # pretty-tag component\n\n/*\n   Pretty text tag\n */\n\nimport PropTypes from 'prop-types';\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'PrettyTag',\n\n  propTypes: {\n    onClick: PropTypes.func,\n    classes: PropTypes.object,\n  },\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const classes = cx(\n      _.extend({}, this.props.classes, { 'pretty-part': true })\n    );\n\n    return (\n      // CodeMirror widgets need some work to make them accessible.\n      // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n      <span\n        renderWith={this.renderWith('PrettyTag')}\n        role=\"button\"\n        className={classes}\n        onClick={this.props.onClick}\n      >\n        {this.props.children}\n      </span>\n    );\n  },\n});\n","'use strict';\n\n/*eslint no-script-url:0 */\n\nimport createReactClass from 'create-react-class';\nimport ReactDOM from 'react-dom';\nimport cx from 'classnames';\n\nimport TagTranslator from './tag-translator';\nimport _ from '../../undash';\nimport { keyCodes, ref } from '../../utils';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nconst toString = function(value) {\n  if (_.isUndefined(value) || _.isNull(value)) {\n    return '';\n  }\n  return String(value);\n};\n\n/*\n   Editor for tagged text. Renders text like \"hello {{firstName}}\"\n   with replacement labels rendered in a pill box. Designed to load\n   quickly when many separate instances of it are on the same\n   page.\n\n   Uses CodeMirror to edit text. To save memory the CodeMirror node is\n   instantiated when the user moves the mouse into the edit area.\n   Initially a read-only view using a simple div is shown.\n */\nexport default createReactClass({\n  displayName: 'PrettyTextInput',\n\n  mixins: [HelperMixin],\n\n  componentDidMount: function() {\n    this.createEditor();\n  },\n\n  componentDidUpdate: function(prevProps, prevState) {\n    const hasReplaceChoicesChanged = !_.isEqual(\n      prevProps.replaceChoices,\n      this.props.replaceChoices\n    );\n    const hasCodeMirrorModeChanged =\n      prevState.codeMirrorMode !== this.state.codeMirrorMode;\n    if (hasCodeMirrorModeChanged || hasReplaceChoicesChanged) {\n      // Changed from code mirror mode to read only mode or vice versa,\n      // so setup the other editor.\n      this.createEditor();\n    }\n    this.updateEditor();\n  },\n\n  componentWillUnmount: function() {\n    if (this.state.codeMirrorMode) {\n      this.removeCodeMirrorEditor();\n    }\n  },\n\n  getInitialState: function() {\n    const selectedChoices = this.props.selectedChoices;\n    const replaceChoices = this.props.replaceChoices;\n    const translator = TagTranslator(\n      selectedChoices.concat(replaceChoices),\n      this.props.config.humanize\n    );\n\n    return {\n      // With number values, onFocus never fires, which means it stays read-only. So convert to string.\n      value: toString(this.props.value),\n      codeMirrorMode: false,\n      isChoicesOpen: false,\n      replaceChoices,\n      translator,\n      hasChanged: false,\n    };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    // If we're debouncing a change, then we should just ignore this props change,\n    // because there will be another when we hit the trailing edge of the debounce.\n    if (this.isDebouncingCodeMirrorChange) {\n      return;\n    }\n\n    const selectedChoices = nextProps.selectedChoices;\n    const replaceChoices = nextProps.replaceChoices;\n    const nextState = {\n      replaceChoices,\n      translator: TagTranslator(\n        selectedChoices.concat(replaceChoices),\n        this.props.config.humanize\n      ),\n    };\n\n    // Not sure what the null/undefined checks are here for, but changed from falsey which was breaking.\n    if (\n      this.state.value !== nextProps.value &&\n      !_.isUndefined(nextProps.value) &&\n      nextProps.value !== null\n    ) {\n      nextState.value = toString(nextProps.value);\n      if (this.state.hasChanged === false) {\n        nextState.hasChanged = true;\n      }\n    }\n\n    this.setState(nextState);\n  },\n\n  onChange: function(newValue) {\n    this.props.onChange(newValue);\n  },\n\n  handleChoiceSelection: function(key, event) {\n    const selectChoice = () => {\n      const pos = this.state.selectedTagPos;\n      const tag = '{{' + key + '}}';\n\n      this.isInserting = true;\n      if (pos) {\n        this.codeMirror.replaceRange(\n          tag,\n          { line: pos.line, ch: pos.start },\n          { line: pos.line, ch: pos.stop }\n        );\n      } else {\n        this.codeMirror.replaceSelection(tag, 'end');\n      }\n      this.isInserting = false;\n      this.codeMirror.focus();\n\n      this.setState({ isChoicesOpen: false, selectedTagPos: null });\n    };\n    if (this.state.codeMirrorMode) {\n      selectChoice();\n    } else if (this.props.readOnly) {\n      // hackety hack to stop dropdown choices from toggling\n      event.stopPropagation();\n      this.isInserting = true;\n      this.onChange('{{' + key + '}}');\n      this.isInserting = false;\n      this.setState({ isChoicesOpen: false });\n    } else {\n      this.switchToCodeMirror(selectChoice);\n    }\n  },\n\n  onFocusWrapper: function() {\n    this.switchToCodeMirror(() => {\n      this.codeMirror.focus();\n      this.codeMirror.setCursor(this.codeMirror.lineCount(), 0);\n    });\n  },\n\n  focus() {\n    if (this.codeMirror) {\n      this.focusCodeMirror();\n    } else {\n      this.switchToCodeMirror(() => {\n        this.focusCodeMirror();\n      });\n    }\n  },\n\n  focusCodeMirror() {\n    if (this.codeMirror) {\n      this.codeMirror.focus();\n    }\n  },\n\n  onFocusCodeMirror() {\n    this.setState({ hasFocus: true });\n    this.props.onFocus();\n  },\n\n  onBlur() {\n    if (this.isDebouncingCodeMirrorChange) {\n      this.onChangeAndTagCodeMirror();\n      this.isDebouncingCodeMirrorChange = false;\n      this.setState({ hasFocus: false }, this.props.onBlur);\n    } else {\n      this.setState({ hasFocus: false });\n      this.props.onBlur();\n    }\n  },\n\n  insertBtn: function() {\n    if (\n      this.props.readOnly ||\n      (this.isReadOnly() && !this.hasReadOnlyControls())\n    ) {\n      return null;\n    }\n    const onInsertClick = function() {\n      this.setState({ selectedTagPos: null });\n      this.onToggleChoices();\n    };\n\n    const props = {\n      typeName: this.props.typeName,\n      ref: ref(this, 'toggle'),\n      onClick: onInsertClick.bind(this),\n      readOnly: this.isReadOnly(),\n      field: this.props.field,\n    };\n    return this.props.config.createElement('insert-button', props, 'Insert...');\n  },\n\n  choices: function() {\n    if (this.isReadOnly()) {\n      return null;\n    }\n\n    return this.props.config.createElement('choices', {\n      typeName: this.props.typeName,\n      ref: ref(this, 'choices'),\n      onFocusSelect: this.focusCodeMirror,\n      choices: this.state.replaceChoices,\n      open: this.state.isChoicesOpen,\n      ignoreCloseNodes: this.getCloseIgnoreNodes,\n      onSelect: this.handleChoiceSelection,\n      onClose: this.onCloseChoices,\n      isAccordion: this.props.isAccordion,\n      field: this.props.field,\n      onChoiceAction: this.onChoiceAction,\n    });\n  },\n\n  onChoiceAction: function(choice) {\n    this.setState({\n      isChoicesOpen: !!choice.isOpen,\n    });\n    this.onStartAction(choice.action, choice);\n  },\n\n  wrapperTabIndex() {\n    if (this.props.readOnly || this.state.codeMirrorMode) {\n      return null;\n    }\n    return this.props.tabIndex || 0;\n  },\n\n  onKeyDown(event) {\n    if (!this.isReadOnly()) {\n      if (event.keyCode === keyCodes.ESC) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.state.isChoicesOpen) {\n          this.onToggleChoices();\n          this.focusCodeMirror();\n        }\n      } else if (!this.state.isChoicesOpen) {\n        // TODO: sane shortcut for opening choices\n        // Below does not work yet. Ends up dumping { into search input.\n        // if (this.codeMirror) {\n        //   if (event.keyCode === keyCodes['['] && event.shiftKey) {\n        //     const cursor = this.codeMirror.getCursor();\n        //     const value = this.codeMirror.getValue();\n        //     const lines = value.split('\\n');\n        //     const line = lines[cursor.line];\n        //     if (line) {\n        //       const prevChar = line[cursor.ch - 1];\n        //       if (prevChar === '{') {\n        //         this.onToggleChoices();\n        //       }\n        //     }\n        //   }\n        // }\n      } else {\n        if (this.choicesRef && this.choicesRef.onKeyDown) {\n          this.choicesRef.onKeyDown(event);\n        }\n      }\n    }\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const textBoxClasses = cx(\n      _.extend({}, this.props.classes, {\n        'pretty-text-box': true,\n        placeholder: this.hasPlaceholder(),\n        'has-focus': this.state.hasFocus,\n      })\n    );\n\n    // Render read-only version.\n    return (\n      <div\n        renderWith={this.renderWith('PrettyTextInputWrapper')}\n        role=\"presentation\"\n        onKeyDown={this.onKeyDown}\n        className={cx({\n          'pretty-text-wrapper': true,\n          'choices-open': this.state.isChoicesOpen,\n        })}\n        onMouseEnter={this.switchToCodeMirror}\n        onTouchStart={this.switchToCodeMirror}\n      >\n        <div\n          renderWith={this.renderWith('PrettyTextInputClickWrapper')}\n          className=\"pretty-text-click-wrapper\"\n          tabIndex=\"0\"\n          // we need to handle onFocus events for this div for accessibility\n          // when the screen reader enters the field it should be the equivalent\n          // of a focus click event\n          onFocus={this.onFocusWrapper}\n          role=\"textbox\"\n        >\n          <div\n            renderWith={this.renderWith('PrettyTextInputTabTarget')}\n            role=\"presentation\"\n            className={textBoxClasses}\n            tabIndex={this.wrapperTabIndex()}\n            onBlur={this.onBlur}\n          >\n            <div\n              renderWith={this.renderWith('PrettyTextInputInternalTextWrapper')}\n              ref={ref(this, 'textBox')}\n              className=\"internal-text-wrapper\"\n            />\n          </div>\n        </div>\n        {this.insertBtn()}\n        {this.choices()}\n      </div>\n    );\n  },\n\n  getCloseIgnoreNodes: function() {\n    return this.toggleRef;\n  },\n\n  onToggleChoices: function() {\n    this.setChoicesOpen(!this.state.isChoicesOpen);\n  },\n\n  setChoicesOpen: function(isOpen) {\n    const action = isOpen ? 'open-replacements' : 'close-replacements';\n    this.onStartAction(action);\n    this.setState({ isChoicesOpen: isOpen });\n  },\n\n  onCloseChoices: function() {\n    if (this.state.isChoicesOpen) {\n      this.setChoicesOpen(false);\n    }\n  },\n\n  createEditor: function() {\n    if (this.state.codeMirrorMode) {\n      this.createCodeMirrorEditor();\n    } else {\n      this.createReadonlyEditor();\n    }\n  },\n\n  updateEditor: function() {\n    if (this.state.codeMirrorMode) {\n      const codeMirrorValue = this.codeMirror.getValue();\n      if (!this.hasPlaceholder() && codeMirrorValue !== this.state.value) {\n        // switch back to read-only mode to make it easier to render\n        this.removeCodeMirrorEditor();\n        this.createReadonlyEditor();\n        this.setState({\n          codeMirrorMode: false,\n        });\n      }\n    } else {\n      this.createReadonlyEditor();\n    }\n  },\n\n  maybeSetCursorPosition(position) {\n    if (position && this.codeMirror) {\n      this.codeMirror.setCursor(position);\n    }\n  },\n\n  maybeCodeMirrorOperation(ops) {\n    if (this.codeMirror) {\n      this.codeMirror.operation(ops);\n    }\n  },\n\n  createCodeMirrorEditor: function() {\n    const options = {\n      tabindex: this.props.tabIndex || 0,\n      lineWrapping: true,\n      placeholder: toString(\n        this.props.config.fieldPlaceholder(this.props.field)\n      ),\n      value: toString(this.state.value),\n      readOnly: false,\n      mode: null,\n      extraKeys: {\n        Tab: false,\n        'Shift-Tab': false,\n      },\n    };\n\n    const textBox = this.textBoxRef;\n    textBox.innerHTML = ''; // release any previous read-only content so it can be GC'ed\n    const pos = this.codeMirror ? this.codeMirror.getCursor() : null;\n    this.codeMirror = this.props.config.codeMirror()(textBox, options);\n    this.codeMirror.on('change', this.onCodeMirrorChange);\n    this.codeMirror.on('focus', this.onFocusCodeMirror);\n\n    this.tagCodeMirror(pos);\n  },\n\n  tagCodeMirror: function(cursorPosition) {\n    const positions = this.state.translator.getTagPositions(\n      this.codeMirror.getValue()\n    );\n    const self = this;\n\n    const tagOps = function() {\n      positions.forEach(function(pos) {\n        const node = self.createTagNode(pos);\n        self.codeMirror.markText(\n          { line: pos.line, ch: pos.start },\n          { line: pos.line, ch: pos.stop },\n          { replacedWith: node, handleMouseEvents: true }\n        );\n      });\n    };\n\n    // Make sure we apply those operations after React has made its rendering pass.\n    // As React 16 is asynchronous and uses rAF, it's safe to assume that this will\n    // be called after React has patched the DOM.\n    //\n    // But if we are calling this function from CodeMirror itself, we want to stay\n    // in sync with it's internal state.\n    if (this.isDebouncingCodeMirrorChange) {\n      this.maybeCodeMirrorOperation(tagOps);\n      this.maybeSetCursorPosition(cursorPosition);\n    } else {\n      requestAnimationFrame(() => {\n        this.maybeCodeMirrorOperation(tagOps);\n        this.maybeSetCursorPosition(cursorPosition);\n      });\n    }\n  },\n\n  onChangeAndTagCodeMirror() {\n    if (!this.codeMirror) {\n      // We might have erased our codemirror instance before hitting the trailing\n      // end of the debounce. If so, get the value out of state.\n      if (this.props.value !== this.state.value) {\n        this.onChange(this.state.value);\n      }\n      return;\n    }\n    this.onChange(this.codeMirror.getValue());\n    this.tagCodeMirror();\n  },\n\n  onCodeMirrorChange: function() {\n    const newValue = this.codeMirror.getValue();\n    this.setState({ value: newValue });\n\n    // Immediately change and tag if inserting.\n    if (this.isInserting) {\n      this.onChangeAndTagCodeMirror();\n      return;\n    }\n\n    // Otherwise, debounce so CodeMirror doesn't die.\n    if (!this.debounceCodeMirrorChange) {\n      this.debounceCodeMirrorChange = _.debounce(() => {\n        if (this.isDebouncingCodeMirrorChange) {\n          this.onChangeAndTagCodeMirror();\n          this.isDebouncingCodeMirrorChange = false;\n        }\n      }, 200);\n    }\n    this.isDebouncingCodeMirrorChange = true;\n    this.debounceCodeMirrorChange();\n  },\n\n  /* Return true if we should render the placeholder */\n  hasPlaceholder: function() {\n    return !this.state.value;\n  },\n\n  createReadonlyEditor: function() {\n    const textBoxNode = this.textBoxRef;\n\n    if (this.hasPlaceholder()) {\n      return ReactDOM.render(\n        <span renderWith={this.renderWith('PrettyTextInputPlaceholder')}>\n          {this.props.field.placeholder}\n        </span>,\n        textBoxNode\n      );\n    }\n\n    const tokens = this.props.config.tokenize(this.state.value);\n    const self = this;\n    const nodes = tokens.map(function(part, i) {\n      if (part.type === 'tag') {\n        const label = self.state.translator.getLabel(part.value);\n        const props = {\n          typeName: self.props.typeName,\n          key: i,\n          tag: part.value,\n          replaceChoices: self.state.replaceChoices,\n          field: self.props.field,\n        };\n        return self.props.config.createElement('pretty-tag', props, label);\n      }\n      return <span key={i}>{part.value}</span>;\n    });\n\n    return ReactDOM.render(\n      <span renderWith={this.renderWith('PrettyTextInputTokens')}>\n        {nodes}\n      </span>,\n      textBoxNode\n    );\n  },\n\n  removeCodeMirrorEditor: function() {\n    const textBoxNode = this.textBoxRef;\n    const cmNode = textBoxNode.firstChild;\n    textBoxNode.removeChild(cmNode);\n    this.codeMirror.off('change', this.onCodeMirrorChange);\n    this.codeMirror.off('focus', this.onFocusCodeMirror);\n    this.codeMirror = null;\n  },\n\n  switchToCodeMirror: function(cb) {\n    if (this.isReadOnly()) {\n      return; // never render in code mirror if read-only\n    }\n    if (!this.props.readOnly) {\n      if (!this.state.codeMirrorMode) {\n        this.setState({ codeMirrorMode: true }, () => {\n          if (this.codeMirror && _.isFunction(cb)) {\n            cb();\n          }\n        });\n      }\n    }\n  },\n\n  onTagClick: function() {\n    const cursor = this.codeMirror.getCursor();\n    const pos = this.state.translator.getTrueTagPosition(\n      this.state.value,\n      cursor\n    );\n\n    this.setState({ selectedTagPos: pos });\n    this.onToggleChoices();\n  },\n\n  createTagNode: function(pos) {\n    const node = document.createElement('span');\n    const label = this.state.translator.getLabel(pos.tag);\n    const config = this.props.config;\n\n    const props = {\n      typeName: this.props.typeName,\n      onClick: this.onTagClick,\n      field: this.props.field,\n      tag: pos.tag,\n    };\n\n    ReactDOM.render(config.createElement('pretty-tag', props, label), node);\n\n    return node;\n  },\n});\n","// # remove-item component\n\n/*\nRemove an item.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'RemoveItem',\n\n  mixins: [HelperMixin],\n\n  getDefaultProps: function() {\n    return {\n      label: '-',\n    };\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  onMouseOverRemove: function() {\n    if (this.props.onMaybeRemove) {\n      this.props.onMaybeRemove(true);\n    }\n  },\n\n  onMouseOutRemove: function() {\n    if (this.props.onMaybeRemove) {\n      this.props.onMaybeRemove(false);\n    }\n  },\n\n  renderDefault: function() {\n    if (this.props.readOnly) {\n      const classes = _.extend({}, this.props.classes, {\n        'readonly-control': this.props.readOnly,\n      });\n\n      return (\n        <button\n          renderWith={this.renderWith('ReadOnlyRemoveItem')}\n          className={cx(classes)}\n        >\n          {this.props.label}\n        </button>\n      );\n    }\n\n    const onKeyDown = event => {\n      if (event.keyCode === 13) {\n        this.props.onClick(event);\n      }\n    };\n\n    return (\n      <button\n        renderWith={this.renderWith('RemoveItem')}\n        tabIndex={0}\n        className={cx(this.props.classes)}\n        onKeyDown={onKeyDown}\n        onClick={this.props.onClick}\n        onMouseOver={this.onMouseOverRemove}\n        onMouseOut={this.onMouseOutRemove}\n      >\n        {this.props.label}\n      </button>\n    );\n  },\n});\n","// # required label component\n\n/*\n  Required Label for a field\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'RequiredLabel',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    const field = this.props.field;\n    const fieldIsRequired = config.fieldIsRequired(field);\n    const className = cx('required-label', {\n      'required-text': fieldIsRequired,\n      'not-required-text': !fieldIsRequired,\n    });\n\n    return (\n      <span\n        renderWith={this.renderWith('RequiredLabel')}\n        className={className}\n      />\n    );\n  },\n});\n","// # help component\n\n/*\nJust the help text block.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'Sample',\n\n  mixins: [HelperMixin],\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const choice = this.props.choice;\n\n    return !choice.sample ? null : (\n      <div\n        renderWith={this.renderWith('Sample')}\n        className={cx(this.props.className)}\n      >\n        {choice.sample}\n      </div>\n    );\n  },\n});\n","// # select-value component\n\n/*\nRender a select dropdown for a list of choices. Choices values can be of any\ntype.\n*/\n\n'use strict';\n\nimport createReactClass from 'create-react-class';\nimport cx from 'classnames';\n\nimport _ from '../../undash';\nimport HelperMixin from '../../mixins/helper';\n\n/** @jsx jsx */\nimport jsx from '../../jsx';\n\nexport default createReactClass({\n  displayName: 'SelectValue',\n\n  mixins: [HelperMixin],\n\n  onChange: function(event) {\n    const choiceValue = event.target.value;\n    const choiceType = choiceValue.substring(0, choiceValue.indexOf(':'));\n    if (choiceType === 'choice') {\n      let choiceIndex = choiceValue.substring(choiceValue.indexOf(':') + 1);\n      choiceIndex = parseInt(choiceIndex);\n      this.props.onChange(this.props.choices[choiceIndex].value);\n    }\n  },\n\n  render: function() {\n    return this.renderWithConfig();\n  },\n\n  renderDefault: function() {\n    const config = this.props.config;\n    let choices = this.props.choices || [];\n\n    let choicesOrLoading;\n\n    if (\n      (choices.length === 1 && choices[0].value === '///loading///') ||\n      config.fieldIsLoading(this.props.field)\n    ) {\n      choicesOrLoading = config.createElement('loading-choices', {\n        typeName: this.props.typeName,\n        field: this.props.field,\n      });\n    } else {\n      const value =\n        this.props.field.value !== undefined ? this.props.field.value : '';\n\n      choices = choices.map(function(choice, i) {\n        return {\n          choiceValue: 'choice:' + i,\n          value: choice.value,\n          label: choice.label,\n        };\n      });\n\n      let valueChoice = _.find(choices, function(choice) {\n        return choice.value === value;\n      });\n\n      if (valueChoice === undefined) {\n        let label = value;\n        if (!_.isString(value)) {\n          label = JSON.stringify(value);\n        }\n        valueChoice = {\n          choiceValue: 'value:',\n          value,\n          label,\n        };\n        choices = [valueChoice].concat(choices);\n      }\n\n      choicesOrLoading = (\n        <select\n          renderWith={this.renderWith('SelectValueSelectInput')}\n          className={cx(this.props.classes)}\n          onChange={this.onChange}\n          value={valueChoice.choiceValue}\n          onFocus={this.onFocusAction}\n          onBlur={this.onBlurAction}\n          disabled={this.isReadOnly()}\n        >\n          {choices.map((choice, i) => (\n            <option\n              renderWith={this.renderWith('SelectValueOption')}\n              key={i}\n              value={choice.choiceValue}\n            >\n              {choice.label}\n            </option>\n          ))}\n        </select>\n      );\n    }\n\n    return choicesOrLoading;\n  },\n});\n","'use strict';\nimport _ from '../../undash';\n\nconst buildChoicesMap = replaceChoices => {\n  const choices = {};\n  replaceChoices.forEach(function(choice) {\n    const key = choice.value;\n    choices[key] = choice.tagLabel || choice.label;\n  });\n  return choices;\n};\n\nconst getTagPositions = text => {\n  const lines = text.split('\\n');\n  const re = /\\{\\{.+?\\}\\}/g;\n  const positions = [];\n  let m;\n\n  for (let i = 0; i < lines.length; i++) {\n    while ((m = re.exec(lines[i])) !== null) {\n      const tag = m[0].substring(2, m[0].length - 2);\n      positions.push({\n        line: i,\n        start: m.index,\n        stop: m.index + m[0].length,\n        tag,\n      });\n    }\n  }\n  return positions;\n};\n\n/*\n   Given a CodeMirror document position like {line: 0, ch: 10}, return\n   the tag position object for that position, for example {line: 0,\n   start: 8, stop: 12}\n\n   When clicking on a pretty tag, CodeMirror .getCursor() may return\n   either the position of the start or the end of the tag, so we use\n   this function to normalize it.\n\n   Clicking on a pretty tag is jumpy - the cursor goes from one end to\n   the other each time you click it. We should probably fix that, and\n   the need for this function might go away.\n*/\nconst getTrueTagPosition = (text, cmPos) => {\n  const positions = getTagPositions(text);\n  return _.find(\n    positions,\n    p => cmPos.line === p.line && cmPos.ch >= p.start && cmPos.ch <= p.stop\n  );\n};\n\n/*\n   Creates helper to translate between tags like {{firstName}} and\n   an encoded representation suitable for use in CodeMirror.\n */\nconst TagTranslator = (replaceChoices, humanize) => {\n  // Map of tag to label 'firstName' --> 'First Name'\n  const choices = buildChoicesMap(replaceChoices);\n\n  return {\n    /*\n       Get label for tag.  For example 'firstName' becomes 'First Name'.\n       Returns a humanized version of the tag if we don't have a label for the tag.\n     */\n    getLabel: tag => {\n      let label = choices[tag];\n      if (!label) {\n        // If tag not found and we have a humanize function, humanize the tag.\n        // Otherwise just return the tag.\n        label = (humanize && humanize(tag)) || tag;\n      }\n      return label;\n    },\n\n    getTagPositions,\n    getTrueTagPosition,\n  };\n};\n\nexport default TagTranslator;\n","// # default-config\n\n/*\nThis is the default configuration plugin for formatic. To change formatic's\nbehavior, just create your own plugin function that returns an object with\nmethods you want to add or override.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport _ from './undash';\nimport utils, { argumentsToArray } from './utils';\n\nimport FieldsField from './components/fields/fields';\nimport GroupedFieldsField from './components/fields/grouped-fields';\nimport StringField from './components/fields/string';\nimport SingleLineStringField from './components/fields/single-line-string';\nimport PasswordField from './components/fields/password';\nimport SelectField from './components/fields/select';\nimport PrettySelectField from './components/fields/pretty-select';\nimport BooleanField from './components/fields/boolean';\nimport PrettyBooleanField from './components/fields/pretty-boolean';\nimport CheckboxBooleanField from './components/fields/checkbox-boolean';\nimport CodeField from './components/fields/code';\nimport PrettyTextField from './components/fields/pretty-text';\nimport PrettyTagField from './components/helpers/pretty-tag';\nimport ArrayField from './components/fields/array';\nimport CheckboxArrayField from './components/fields/checkbox-array';\nimport ObjectField from './components/fields/object';\nimport AssocListField from './components/fields/assoc-list';\nimport JsonField from './components/fields/json';\nimport UnknownFieldField from './components/fields/unknown';\nimport CopyField from './components/fields/copy';\n\nimport FieldHelper from './components/helpers/field';\nimport FieldBody from './components/helpers/field-body';\nimport LabelHelper from './components/helpers/label';\nimport RequiredLabelHelper from './components/helpers/required-label';\nimport HelpHelper from './components/helpers/help';\nimport ChoicesHelper from './components/helpers/choices';\nimport ChoicesItemHelper from './components/helpers/choices-item';\nimport ChoiceHelper from './components/helpers/choice';\nimport ChoicesSearchHelper from './components/helpers/choices-search';\nimport LoadingChoicesHelper from './components/helpers/loading-choices';\nimport LoadingChoiceHelper from './components/helpers/loading-choice';\nimport ArrayControlHelper from './components/helpers/array-control';\nimport ArrayItemControlHelper from './components/helpers/array-item-control';\nimport ArrayItemValueHelper from './components/helpers/array-item-value';\nimport ArrayItemHelper from './components/helpers/array-item';\nimport FieldTemplateChoicesHelper from './components/helpers/field-template-choices';\nimport AddItemHelper from './components/helpers/add-item';\nimport RemoveItemHelper from './components/helpers/remove-item';\nimport MoveItemForwardHelper from './components/helpers/move-item-forward';\nimport MoveItemBackHelper from './components/helpers/move-item-back';\nimport AssocListControlHelper from './components/helpers/assoc-list-control';\nimport AssocListItemControlHelper from './components/helpers/assoc-list-item-control';\nimport AssocListItemValueHelper from './components/helpers/assoc-list-item-value';\nimport AssocListItemKeyHelper from './components/helpers/assoc-list-item-key';\nimport AssocListItemHelper from './components/helpers/assoc-list-item';\nimport SelectValueHelper from './components/helpers/select-value';\nimport PrettySelectValueHelper from './components/helpers/pretty-select-value';\nimport PrettySelectInputHelper from './components/helpers/pretty-select-input';\nimport SampleHelper from './components/helpers/sample';\nimport InsertButtonHelper from './components/helpers/insert-button';\nimport ChoiceSectionHeaderHelper from './components/helpers/choice-section-header';\nimport PrettyTextInputHelper from './components/helpers/pretty-text-input';\n\nconst canHostCodeMirror = typeof window !== 'undefined';\n\nexport default function(config) {\n  const delegateTo = utils.delegator(config);\n\n  const createElement_String = React.createFactory(StringField);\n  const createElement_Select = React.createFactory(SelectField);\n\n  return {\n    // Field element factories. Create field elements.\n\n    createElement_Fields: React.createFactory(FieldsField),\n\n    createElement_FieldBody: React.createFactory(FieldBody),\n\n    createElement_GroupedFields: React.createFactory(GroupedFieldsField),\n\n    createElement_String,\n\n    createElement_SingleLineString: React.createFactory(SingleLineStringField),\n\n    createElement_Password: React.createFactory(PasswordField),\n\n    createElement_Select,\n\n    createElement_PrettySelect: React.createFactory(PrettySelectField),\n\n    createElement_Boolean: React.createFactory(BooleanField),\n\n    createElement_PrettyBoolean: React.createFactory(PrettyBooleanField),\n\n    createElement_CheckboxBoolean: React.createFactory(CheckboxBooleanField),\n\n    createElement_Code: canHostCodeMirror\n      ? React.createFactory(CodeField)\n      : props => createElement_String({ ...props, typeName: 'Code' }),\n\n    createElement_PrettyText: React.createFactory(PrettyTextField),\n\n    createElement_PrettyTag: React.createFactory(PrettyTagField),\n\n    createElement_Array: React.createFactory(ArrayField),\n\n    createElement_CheckboxArray: React.createFactory(CheckboxArrayField),\n\n    createElement_Object: React.createFactory(ObjectField),\n\n    createElement_AssocList: React.createFactory(AssocListField),\n\n    createElement_Json: React.createFactory(JsonField),\n\n    createElement_UnknownField: React.createFactory(UnknownFieldField),\n\n    createElement_Copy: React.createFactory(CopyField),\n\n    // Other element factories. Create helper elements used by field components.\n\n    createElement_Field: React.createFactory(FieldHelper),\n\n    createElement_Label: React.createFactory(LabelHelper),\n\n    createElement_RequiredLabel: React.createFactory(RequiredLabelHelper),\n\n    createElement_Help: React.createFactory(HelpHelper),\n\n    createElement_Choices: React.createFactory(ChoicesHelper),\n\n    createElement_ChoicesItem: React.createFactory(ChoicesItemHelper),\n\n    createElement_ChoiceActionSample: () => null,\n\n    createElement_Choice: React.createFactory(ChoiceHelper),\n\n    createElement_InfoChoice: React.createFactory(ChoiceHelper),\n\n    createElement_ActionChoice: React.createFactory(ChoiceHelper),\n\n    createElement_SectionChoice: React.createFactory(ChoiceHelper),\n\n    createElement_ChoicesSearch: React.createFactory(ChoicesSearchHelper),\n\n    createElement_LoadingChoices: React.createFactory(LoadingChoicesHelper),\n\n    createElement_LoadingChoice: React.createFactory(LoadingChoiceHelper),\n\n    createElement_ArrayControl: React.createFactory(ArrayControlHelper),\n\n    createElement_ArrayItemControl: React.createFactory(ArrayItemControlHelper),\n\n    createElement_ArrayItemValue: React.createFactory(ArrayItemValueHelper),\n\n    createElement_ArrayItem: React.createFactory(ArrayItemHelper),\n\n    createElement_FieldTemplateChoices: React.createFactory(\n      FieldTemplateChoicesHelper\n    ),\n\n    createElement_AddItem: React.createFactory(AddItemHelper),\n\n    createElement_RemoveItem: React.createFactory(RemoveItemHelper),\n\n    createElement_MoveItemForward: React.createFactory(MoveItemForwardHelper),\n\n    createElement_MoveItemBack: React.createFactory(MoveItemBackHelper),\n\n    createElement_AssocListControl: React.createFactory(AssocListControlHelper),\n\n    createElement_AssocListItemControl: React.createFactory(\n      AssocListItemControlHelper\n    ),\n\n    createElement_AssocListItemValue: React.createFactory(\n      AssocListItemValueHelper\n    ),\n\n    createElement_AssocListItemKey: React.createFactory(AssocListItemKeyHelper),\n\n    createElement_AssocListItem: React.createFactory(AssocListItemHelper),\n\n    createElement_SelectValue: React.createFactory(SelectValueHelper),\n\n    createElement_PrettySelectValue: React.createFactory(\n      PrettySelectValueHelper\n    ),\n\n    createElement_PrettySelectInput: React.createFactory(\n      PrettySelectInputHelper\n    ),\n\n    createElement_Sample: React.createFactory(SampleHelper),\n\n    createElement_InsertButton: React.createFactory(InsertButtonHelper),\n\n    createElement_ChoiceSectionHeader: React.createFactory(\n      ChoiceSectionHeaderHelper\n    ),\n\n    createElement_PrettyTextInput: React.createFactory(PrettyTextInputHelper),\n\n    // Field default value factories. Give a default value for a specific type.\n\n    createDefaultValue_String: function(/* fieldTemplate */) {\n      return '';\n    },\n\n    createDefaultValue_Object: function(/* fieldTemplate */) {\n      return {};\n    },\n\n    createDefaultValue_Array: function(/* fieldTemplate */) {\n      return [];\n    },\n\n    createDefaultValue_Boolean: function(/* fieldTemplate */) {\n      return false;\n    },\n\n    createDefaultValue_AssocList: delegateTo('createDefaultValue_Array'),\n\n    createDefaultValue_Fields: delegateTo('createDefaultValue_Object'),\n\n    createDefaultValue_SingleLineString: delegateTo(\n      'createDefaultValue_String'\n    ),\n\n    createDefaultValue_Select: delegateTo('createDefaultValue_String'),\n\n    createDefaultValue_Json: delegateTo('createDefaultValue_Object'),\n\n    createDefaultValue_CheckboxArray: delegateTo('createDefaultValue_Array'),\n\n    createDefaultValue_CheckboxBoolean: delegateTo(\n      'createDefaultValue_Boolean'\n    ),\n\n    // Field value coercers. Coerce a value into a value appropriate for a specific type.\n\n    coerceValue_String: function(fieldTemplate, value) {\n      if (_.isString(value)) {\n        return value;\n      }\n      if (_.isUndefined(value) || value === null) {\n        return '';\n      }\n      return JSON.stringify(value);\n    },\n\n    coerceValue_Object: function(fieldTemplate, value) {\n      if (!_.isObject(value)) {\n        return {};\n      }\n      return value;\n    },\n\n    coerceValue_AssocList: function(fieldTemplate, value) {\n      if (_.isArray(value)) {\n        return value;\n      }\n      if (_.isObject(value)) {\n        return config.objectToAssocList(value);\n      }\n      return [value];\n    },\n\n    coerceValue_Array: function(fieldTemplate, value) {\n      if (!_.isArray(value)) {\n        return [value];\n      }\n      return value;\n    },\n\n    coerceValue_Boolean: function(fieldTemplate, value) {\n      return config.coerceValueToBoolean(value);\n    },\n\n    coerceValue_Fields: delegateTo('coerceValue_Object'),\n\n    coerceValue_SingleLineString: delegateTo('coerceValue_String'),\n\n    coerceValue_Select: delegateTo('coerceValue_String'),\n\n    coerceValue_PrettySelect: delegateTo('coerceValue_String'),\n\n    coerceValue_Json: delegateTo('coerceValue_Object'),\n\n    coerceValue_CheckboxArray: delegateTo('coerceValue_Array'),\n\n    coerceValue_CheckboxBoolean: delegateTo('coerceValue_Boolean'),\n\n    coerceValue_PrettyBoolean: delegateTo('coerceValue_Boolean'),\n\n    // Field child fields factories, so some types can have dynamic children.\n\n    createChildFields_Array: function(field) {\n      return field.value.map(function(arrayItem, i) {\n        const childFieldTemplate = config.childFieldTemplateForValue(\n          field,\n          arrayItem\n        );\n\n        const childField = config.createChildField(field, {\n          fieldTemplate: childFieldTemplate,\n          key: i,\n          fieldIndex: i,\n          value: arrayItem,\n        });\n\n        return childField;\n      });\n    },\n\n    createChildFields_AssocList: function(field) {\n      return field.value.map(function(row, i) {\n        const childFieldTemplate = config.childFieldTemplateForValue(\n          field,\n          row.value\n        );\n\n        const childField = config.createChildField(field, {\n          fieldTemplate: childFieldTemplate,\n          key: i,\n          fieldIndex: i,\n          value: row.value,\n        });\n\n        return childField;\n      });\n    },\n\n    createChildFields_Object: function(field) {\n      return Object.keys(field.value).map(function(key, i) {\n        const childFieldTemplate = config.childFieldTemplateForValue(\n          field,\n          field.value[key]\n        );\n\n        const childField = config.createChildField(field, {\n          fieldTemplate: childFieldTemplate,\n          key,\n          fieldIndex: i,\n          value: field.value[key],\n        });\n\n        return childField;\n      });\n    },\n\n    // Check if there is a factory for the name.\n    hasElementFactory: function(name) {\n      return config['createElement_' + name] ? true : false;\n    },\n\n    // Create an element given a name, props, and children.\n    createElement: function(name, props, children) {\n      if (!props.config) {\n        props = _.extend({}, props, { config });\n      }\n\n      name = config.elementName(name);\n\n      const createElement = config['createElement_' + name];\n\n      if (createElement) {\n        if (children && createElement.length === 1) {\n          return createElement({\n            ...props,\n            children,\n          });\n        }\n        return createElement(props, children);\n      }\n\n      if (name !== 'Unknown') {\n        if (config.hasElementFactory('Unknown')) {\n          return config.createElement('Unknown', props, children);\n        }\n      }\n\n      throw new Error('Factory not found for: ' + name);\n    },\n\n    // Create a field element given some props. Use context to determine name.\n    createFieldElement: function(props) {\n      const name = config.fieldTypeName(props.field);\n\n      if (config.hasElementFactory(name)) {\n        return config.createElement(name, props);\n      }\n\n      return config.createElement('UnknownField', props);\n    },\n\n    // Render the root formatic component\n    renderFormaticComponent: function(component) {\n      const props = component.props;\n      const field = config.createRootField(props);\n\n      return (\n        <div className=\"formatic\">\n          {config.createFieldElement({\n            field,\n            onChange: component.onChange,\n            onAction: component.onAction,\n          })}\n        </div>\n      );\n    },\n\n    // Render any component.\n    renderComponent: function(component) {\n      const name = component.constructor.displayName;\n\n      if (config['renderComponent_' + name]) {\n        return config['renderComponent_' + name](component);\n      }\n\n      return component.renderDefault();\n    },\n\n    // Render field components.\n    renderFieldComponent: function(component) {\n      return config.renderComponent(component);\n    },\n\n    // Normalize an element name.\n    elementName: function(name) {\n      return utils.dashToPascal(name);\n    },\n\n    renderTag: function(tagName, tagProps, metaProps, children) {\n      if (arguments.length < 5) {\n        return React.createElement(tagName, tagProps, children);\n      } else {\n        return React.createElement.apply(\n          null,\n          argumentsToArray(arguments, 3, [tagName, tagProps])\n        );\n      }\n    },\n\n    // Type aliases.\n\n    alias_Dict: 'Object',\n\n    alias_Bool: 'Boolean',\n\n    alias_PrettyTextarea: 'PrettyText',\n\n    alias_SingleLineString: function(fieldTemplate) {\n      if (fieldTemplate.replaceChoices) {\n        return 'PrettyText';\n      } else if (fieldTemplate.choices) {\n        return 'Select';\n      }\n      return 'SingleLineString';\n    },\n\n    alias_String: function(fieldTemplate) {\n      if (fieldTemplate.replaceChoices) {\n        return 'PrettyText';\n      } else if (fieldTemplate.choices) {\n        return 'Select';\n      } else if (config.fieldTemplateIsSingleLine(fieldTemplate)) {\n        return 'SingleLineString';\n      }\n      return 'String';\n    },\n\n    alias_Text: delegateTo('alias_String'),\n\n    alias_Unicode: delegateTo('alias_SingleLineString'),\n\n    alias_Str: delegateTo('alias_SingleLineString'),\n\n    alias_List: 'Array',\n\n    alias_CheckboxList: 'CheckboxArray',\n\n    alias_Fieldset: 'Fields',\n\n    alias_Checkbox: 'CheckboxBoolean',\n\n    // Field factory\n\n    // Given a field, expand all child fields recursively to get the default\n    // values of all fields.\n    inflateFieldValue: function(field, fieldHandler) {\n      if (fieldHandler) {\n        const stop = fieldHandler(field);\n        if (stop === false) {\n          return undefined;\n        }\n      }\n\n      if (config.fieldHasValueChildren(field)) {\n        const value = _.clone(field.value);\n        const childFields = config.createChildFields(field);\n        childFields.forEach(function(childField) {\n          if (config.isKey(childField.key)) {\n            value[childField.key] = config.inflateFieldValue(\n              childField,\n              fieldHandler\n            );\n          } else {\n            // a child with no key might have sub-children with keys\n            const obj = config.inflateFieldValue(childField, fieldHandler);\n            _.extend(value, obj);\n          }\n        });\n        return value;\n      } else {\n        return field.value;\n      }\n    },\n\n    // Initialize the root field.\n    initRootField: function(/* field, props */) {},\n\n    // Initialize every field.\n    initField: function(/* field */) {},\n\n    // If an array of field templates are passed in, this method is used to\n    // wrap the fields inside a single root field template.\n    wrapFieldTemplates: function(fieldTemplates) {\n      return {\n        type: 'fields',\n        plain: true,\n        fields: fieldTemplates,\n      };\n    },\n\n    // Given the props that are passed in, create the root field.\n    createRootField: function(props) {\n      let fieldTemplate =\n        props.fieldTemplate ||\n        props.fieldTemplates ||\n        props.field ||\n        props.fields;\n      const value = props.value;\n\n      if (!fieldTemplate) {\n        fieldTemplate = config.createFieldTemplateFromValue(value);\n      }\n\n      if (_.isArray(fieldTemplate)) {\n        fieldTemplate = config.wrapFieldTemplates(fieldTemplate);\n      }\n\n      const field = _.extend({}, fieldTemplate, {\n        rawFieldTemplate: fieldTemplate,\n      });\n      if (config.hasValue(fieldTemplate, value)) {\n        field.value = config.coerceValue(fieldTemplate, value);\n      } else {\n        field.value = config.createDefaultValue(fieldTemplate);\n      }\n\n      config.initRootField(field, props);\n      config.initField(field);\n\n      if (\n        value === null ||\n        config.isEmptyObject(value) ||\n        _.isUndefined(value)\n      ) {\n        field.value = config.inflateFieldValue(field);\n      }\n\n      if (props.readOnly) {\n        field.readOnly = true;\n      }\n\n      return field;\n    },\n\n    // Given the props that are passed in, create the value that will be displayed\n    // by all the components.\n    createRootValue: function(props, fieldHandler) {\n      const field = config.createRootField(props);\n\n      return config.inflateFieldValue(field, fieldHandler);\n    },\n\n    validateRootValue: function(props) {\n      const errors = [];\n\n      config.createRootValue(props, function(field) {\n        const fieldErrors = config.fieldErrors(field);\n        if (fieldErrors.length > 0) {\n          errors.push({\n            path: config.fieldValuePath(field),\n            errors: fieldErrors,\n          });\n        }\n      });\n\n      return errors;\n    },\n\n    isValidRootValue: function(props) {\n      let isValid = true;\n\n      config.createRootValue(props, function(field) {\n        if (config.fieldErrors(field).length > 0) {\n          isValid = false;\n          return false;\n        }\n\n        return undefined;\n      });\n\n      return isValid;\n    },\n\n    validateField: function(field, errors) {\n      if (field.value === undefined || field.value === '') {\n        if (config.fieldIsRequired(field)) {\n          errors.push({\n            type: 'required',\n          });\n        }\n      }\n    },\n\n    cssTransitionWrapper: function(...children) {\n      return React.createElement(React.Fragment, {}, ...children);\n    },\n\n    // Create dynamic child fields for a field.\n    createChildFields: function(field) {\n      const typeName = config.fieldTypeName(field);\n\n      if (config['createChildFields_' + typeName]) {\n        return config['createChildFields_' + typeName](field);\n      }\n\n      return config\n        .fieldChildFieldTemplates(field)\n        .map(function(childField, i) {\n          let childValue = field.value;\n          if (config.isKey(childField.key)) {\n            childValue = field.value[childField.key];\n          }\n          return config.createChildField(field, {\n            fieldTemplate: childField,\n            key: childField.key,\n            fieldIndex: i,\n            value: childValue,\n          });\n        });\n    },\n\n    // Create a single child field for a parent field.\n    createChildField: function(parentField, options) {\n      const childValue = options.value;\n\n      const childField = _.extend({}, options.fieldTemplate, {\n        key: options.key,\n        parent: parentField,\n        fieldIndex: options.fieldIndex,\n        rawFieldTemplate: options.fieldTemplate,\n      });\n\n      if (config.hasValue(options.fieldTemplate, childValue)) {\n        childField.value = config.coerceValue(\n          options.fieldTemplate,\n          childValue\n        );\n      } else {\n        childField.value = config.createDefaultValue(options.fieldTemplate);\n      }\n\n      config.initField(childField);\n\n      return childField;\n    },\n\n    // Create a temporary field and extract its value.\n    createNewChildFieldValue: function(parentField, itemFieldIndex) {\n      const childFieldTemplate = config.fieldItemFieldTemplates(parentField)[\n        itemFieldIndex\n      ];\n\n      let newValue = config.fieldTemplateValue(childFieldTemplate);\n\n      // Just a placeholder key. Should not be important.\n      let key = '__unknown_key__';\n\n      if (_.isArray(parentField.value)) {\n        // Just a placeholder position for an array.\n        key = parentField.value.length;\n      }\n\n      // Just a placeholder field index. Should not be important.\n      let fieldIndex = 0;\n      if (_.isObject(parentField.value)) {\n        fieldIndex = Object.keys(parentField.value).length;\n      }\n\n      const childField = config.createChildField(parentField, {\n        fieldTemplate: childFieldTemplate,\n        key,\n        fieldIndex,\n        value: newValue,\n      });\n\n      newValue = config.inflateFieldValue(childField);\n\n      return newValue;\n    },\n\n    // Given a value, create a field template for that value.\n    createFieldTemplateFromValue: function(value) {\n      let field = {\n        type: 'json',\n      };\n      if (_.isString(value)) {\n        field = {\n          type: 'string',\n        };\n      } else if (_.isNumber(value)) {\n        field = {\n          type: 'number',\n        };\n      } else if (_.isBoolean(value)) {\n        field = {\n          type: 'boolean',\n        };\n      } else if (_.isArray(value)) {\n        const arrayItemFields = value.map(function(childValue, i) {\n          const childField = config.createFieldTemplateFromValue(childValue);\n          childField.key = i;\n          return childField;\n        });\n        field = {\n          type: 'array',\n          fields: arrayItemFields,\n        };\n      } else if (_.isObject(value)) {\n        const objectItemFields = Object.keys(value).map(function(key) {\n          const childField = config.createFieldTemplateFromValue(value[key]);\n          childField.key = key;\n          childField.label = config.humanize(key);\n          return childField;\n        });\n        field = {\n          type: 'object',\n          fields: objectItemFields,\n        };\n      } else if (_.isNull(value)) {\n        field = {\n          type: 'json',\n        };\n      }\n      return field;\n    },\n\n    // Default value factory\n\n    createDefaultValue: function(fieldTemplate) {\n      const defaultValue = config.fieldTemplateDefaultValue(fieldTemplate);\n\n      if (!_.isUndefined(defaultValue)) {\n        return utils.deepCopy(defaultValue);\n      }\n\n      const typeName = config.fieldTypeName(fieldTemplate);\n\n      if (config['createDefaultValue_' + typeName]) {\n        return config['createDefaultValue_' + typeName](fieldTemplate);\n      }\n\n      return '';\n    },\n\n    // Field helpers\n\n    // Determine if a value \"exists\".\n    hasValue: function(fieldTemplate, value) {\n      return value !== null && !_.isUndefined(value);\n    },\n\n    // Coerce a value to value appropriate for a field.\n    coerceValue: function(field, value) {\n      const typeName = config.fieldTypeName(field);\n\n      if (config['coerceValue_' + typeName]) {\n        return config['coerceValue_' + typeName](field, value);\n      }\n\n      return value;\n    },\n\n    // Given a field and a child value, find the appropriate field template for\n    // that child value.\n    childFieldTemplateForValue: function(field, childValue) {\n      const fieldTemplates = config.fieldItemFieldTemplates(field);\n\n      const fieldTemplate = _.find(fieldTemplates, function(itemFieldTemplate) {\n        return config.matchesFieldTemplateToValue(\n          itemFieldTemplate,\n          childValue\n        );\n      });\n\n      if (fieldTemplate) {\n        return fieldTemplate;\n      } else {\n        return config.createFieldTemplateFromValue(childValue);\n      }\n    },\n\n    // Determine if a value is a match for a field template.\n    matchesFieldTemplateToValue: function(fieldTemplate, value) {\n      const match = fieldTemplate.match;\n      if (!match) {\n        return true;\n      }\n      return _.every(Object.keys(match), function(key) {\n        return _.isEqual(match[key], value[key]);\n      });\n    },\n\n    // Field template helpers\n\n    // Normalized (PascalCase) type name for a field.\n    fieldTemplateTypeName: function(fieldTemplate) {\n      let typeName = utils.dashToPascal(fieldTemplate.type || 'undefined');\n\n      const alias = config['alias_' + typeName];\n\n      if (alias) {\n        if (_.isFunction(alias)) {\n          return alias.call(config, fieldTemplate);\n        } else {\n          return alias;\n        }\n      }\n\n      if (fieldTemplate.list) {\n        typeName = 'Array';\n      }\n\n      return typeName;\n    },\n\n    // Default value for a field template.\n    fieldTemplateDefaultValue: function(fieldTemplate) {\n      if (!_.isUndefined(fieldTemplate.default)) {\n        return config.coerceValue(fieldTemplate, fieldTemplate.default);\n      }\n\n      return fieldTemplate.default;\n    },\n\n    // Value for a field template. Used to determine the value of a new child\n    // field.\n    fieldTemplateValue: function(fieldTemplate) {\n      // This logic might be brittle.\n\n      const defaultValue = config.fieldTemplateDefaultValue(fieldTemplate);\n\n      const match = config.fieldTemplateMatch(fieldTemplate);\n\n      if (_.isUndefined(defaultValue) && !_.isUndefined(match)) {\n        return utils.deepCopy(match);\n      }\n\n      return config.createDefaultValue(fieldTemplate);\n    },\n\n    // Match rule for a field template.\n    fieldTemplateMatch: function(fieldTemplate) {\n      return fieldTemplate.match;\n    },\n\n    // Determine if a field template has a single-line value.\n    fieldTemplateIsSingleLine: function(fieldTemplate) {\n      return (\n        fieldTemplate.isSingleLine ||\n        fieldTemplate.is_single_line ||\n        fieldTemplate.type === 'single-line-string' ||\n        fieldTemplate.type === 'SingleLineString'\n      );\n    },\n\n    // Field helpers\n\n    // Get an array of keys representing the path to a value.\n    fieldValuePath: function(field) {\n      let parentPath = [];\n\n      if (field.parent) {\n        parentPath = config.fieldValuePath(field.parent);\n      }\n\n      return parentPath.concat(field.key).filter(function(key) {\n        return !_.isUndefined(key) && key !== '';\n      });\n    },\n\n    // Clone a field with a different value.\n    fieldWithValue: function(field, value) {\n      return _.extend({}, field, { value });\n    },\n\n    fieldTypeName: delegateTo('fieldTemplateTypeName'),\n\n    // Field is loading choices.\n    fieldIsLoading: function(field) {\n      return field.isLoading;\n    },\n\n    // Get the choices for a dropdown field.\n    fieldChoices: function(field) {\n      return config.normalizeChoices(field.choices);\n    },\n\n    // Get the choices for a pretty dropdown field.\n    fieldPrettyChoices: function(field) {\n      return config.normalizePrettyChoices(field.choices);\n    },\n\n    // Get a set of boolean choices for a field.\n    fieldBooleanChoices: function(field) {\n      const choices = config.fieldChoices(field);\n\n      if (choices.length === 0) {\n        return [\n          {\n            label: 'yes',\n            value: true,\n          },\n          {\n            label: 'no',\n            value: false,\n          },\n        ];\n      }\n\n      return choices.map(function(choice) {\n        if (_.isBoolean(choice.value)) {\n          return choice;\n        }\n        return _.extend({}, choice, {\n          value: config.coerceValueToBoolean(choice.value),\n        });\n      });\n    },\n\n    // Get a set of replacement choices for a field.\n    fieldReplaceChoices: function(field) {\n      return config.normalizeChoices(field.replaceChoices);\n    },\n\n    // The active selected choice could be unavailable in the current list of\n    // choices. This provides the selected choice in that case.\n    fieldSelectedChoice: function(field) {\n      return field.selectedChoice || null;\n    },\n\n    // The active replace labels could be unavilable in the current list of\n    // replace choices. This provides the currently used replace labels in\n    // that case.\n    fieldSelectedReplaceChoices: function(field) {\n      return config.normalizeChoices(field.selectedReplaceChoices);\n    },\n\n    // Get a label for a field.\n    fieldLabel: function(field) {\n      return field.label;\n    },\n\n    // Get a placeholder (just a default display value, not a default value) for a field.\n    fieldPlaceholder: function(field) {\n      return field.placeholder;\n    },\n\n    // Get the help text for a field.\n    fieldHelpText: function(field) {\n      return (\n        field.help_text_html ||\n        field.help_text ||\n        field.helpText ||\n        field.helpTextHtml\n      );\n    },\n\n    // Get whether or not a field is required.\n    fieldIsRequired: function(field) {\n      return field.required ? true : false;\n    },\n\n    fieldHasSearch: function(field) {\n      return _.isUndefined(field.hasSearch) ? true : field.hasSearch;\n    },\n\n    // Determine if value for this field is not a leaf value.\n    fieldHasValueChildren: function(field) {\n      const defaultValue = config.createDefaultValue(field);\n\n      if (_.isObject(defaultValue) || _.isArray(defaultValue)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    // Get the child field templates for this field.\n    fieldChildFieldTemplates: function(field) {\n      return field.fields || [];\n    },\n\n    // Get the field templates for each item of this field. (For dynamic children,\n    // like arrays.)\n    fieldItemFieldTemplates: function(field) {\n      if (!field.itemFields) {\n        return [{ type: 'text' }];\n      }\n      if (!_.isArray(field.itemFields)) {\n        return [field.itemFields];\n      }\n      return field.itemFields;\n    },\n\n    // Template for a custom field for a dropdown.\n    fieldCustomFieldTemplate: function(field) {\n      return field.customField;\n    },\n\n    fieldIsSingleLine: delegateTo('fieldTemplateIsSingleLine'),\n\n    // Get whether or not a field is collapsed.\n    fieldIsCollapsed: function(field) {\n      return field.collapsed ? true : false;\n    },\n\n    // Get wheter or not a field can be collapsed.\n    fieldIsCollapsible: function(field) {\n      return field.collapsible || !_.isUndefined(field.collapsed);\n    },\n\n    // Get the number of rows for a field.\n    fieldRows: function(field) {\n      return field.rows;\n    },\n\n    fieldErrors: function(field) {\n      const errors = [];\n\n      if (config.isKey(field.key)) {\n        config.validateField(field, errors);\n      }\n\n      return errors;\n    },\n\n    fieldMatch: delegateTo('fieldTemplateMatch'),\n\n    // Return true if field is read-only, or is a descendant of a read-only field\n    fieldIsReadOnly: function(field) {\n      if (field.readOnly) {\n        return true;\n      } else if (field.parent) {\n        return config.fieldIsReadOnly(field.parent);\n      } else {\n        return false;\n      }\n    },\n\n    // Return true if field has read-only controls. Useful for read-only controls used\n    // in demo screenshot type effects, where you want it to look just like the real\n    // thing, but read-only.\n    fieldHasReadOnlyControls(field) {\n      if (field.hasReadOnlyControls) {\n        return true;\n      } else if (field.parent) {\n        return config.fieldHasReadOnlyControls(field.parent);\n      } else {\n        return false;\n      }\n    },\n\n    // Other helpers\n\n    // Convert an object into an array of key / value objects\n    objectToAssocList(obj) {\n      const array = [];\n      _.each(Object.keys(obj), key => {\n        array.push({ key, value: obj[key] });\n      });\n      return array;\n    },\n\n    // Convert an array of key / value objects to an object\n    assocListToObject(assocList) {\n      const obj = {};\n      _.each(assocList, row => {\n        obj[row.key] = row.value;\n      });\n      return obj;\n    },\n\n    // Convert a key to a nice human-readable version.\n    humanize: function(property = '') {\n      property = String(property).replace(/\\{\\{/g, '');\n      property = property.replace(/\\}\\}/g, '');\n      return property.replace(/_/g, ' ').replace(/(\\w+)/g, function(match) {\n        return match.charAt(0).toUpperCase() + match.slice(1);\n      });\n    },\n\n    tokenize(text) {\n      text = String(text);\n      if (text === '') {\n        return [];\n      }\n\n      const regexp = /(\\{\\{|\\}\\})/;\n      const parts = text.split(regexp);\n\n      const tokens = [];\n      let inTag = false;\n      parts.forEach(function(part) {\n        if (part === '{{') {\n          inTag = true;\n        } else if (part === '}}') {\n          inTag = false;\n        } else if (inTag) {\n          tokens.push({ type: 'tag', value: part });\n        } else {\n          tokens.push({ type: 'string', value: part });\n        }\n      });\n      return tokens;\n    },\n\n    // Normalize some choices for a drop-down.\n    normalizeChoices: function(choices) {\n      if (!choices) {\n        return [];\n      }\n\n      // Convert comma separated string to array of strings.\n      if (_.isString(choices)) {\n        choices = choices.split(',');\n      }\n\n      // Convert object to array of objects with `value` and `label` properties.\n      if (!_.isArray(choices) && _.isObject(choices)) {\n        choices = Object.keys(choices).map(function(key) {\n          return {\n            value: key,\n            label: choices[key],\n          };\n        });\n      }\n\n      // Copy the array of choices so we can manipulate them.\n      choices = choices.slice(0);\n\n      // Array of choice arrays should be flattened.\n      choices = _.compact(_.flatten(choices));\n\n      const choicesWithLabels = choices.map(function(choice) {\n        // Convert any string choices to objects with `value` and `label`\n        // properties.\n        const maybeStringChoice = _.isString(choice)\n          ? {\n              value: choice,\n              label: config.humanize(choice),\n            }\n          : choice;\n\n        return !maybeStringChoice.label\n          ? Object.assign({}, maybeStringChoice, {\n              label: config.humanize(choice.value),\n            })\n          : maybeStringChoice;\n      });\n\n      return choicesWithLabels;\n    },\n\n    // Normalize choices for a pretty drop down, with 'sample' values\n    normalizePrettyChoices: function(choices) {\n      if (!_.isArray(choices) && _.isObject(choices)) {\n        choices = Object.keys(choices).map(function(key) {\n          return {\n            value: key,\n            label: choices[key],\n            sample: key,\n          };\n        });\n      }\n\n      return config.normalizeChoices(choices);\n    },\n\n    // Coerce a value to a boolean\n    coerceValueToBoolean: function(value) {\n      if (!_.isString(value)) {\n        // Just use the default truthiness.\n        return value ? true : false;\n      }\n      value = value.toLowerCase();\n      if (\n        value === '' ||\n        value === 'no' ||\n        value === 'off' ||\n        value === 'false' ||\n        value === '0'\n      ) {\n        return false;\n      }\n      return true;\n    },\n\n    // Determine if a value is a valid key.\n    isKey: function(key) {\n      return (_.isNumber(key) && key >= 0) || (_.isString(key) && key !== '');\n    },\n\n    // Fast way to check for empty object.\n    isEmptyObject: function(obj) {\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    actionChoiceLabel: function(action) {\n      return utils.capitalize(action).replace(/[-]/g, ' ');\n    },\n\n    customChoiceDisplayValue: function(customChoice) {\n      return customChoice && customChoice.label;\n    },\n\n    sortChoices: function(choices) {\n      return choices;\n    },\n\n    isSearchStringInChoice: function(searchString, choice) {\n      return (\n        choice.label &&\n        choice.label.toLowerCase().indexOf(searchString.toLowerCase()) > -1\n      );\n    },\n\n    isRemovalOfLastArrayItemAllowed(/* field */) {\n      return true;\n    },\n\n    isRemovalOfLastAssocListItemAllowed(/* field */) {\n      return true;\n    },\n\n    codeMirror() {\n      if (typeof window.CodeMirror !== 'undefined') {\n        return window.CodeMirror;\n      }\n      return require('codemirror');\n    },\n  };\n}\n","// # formatic\n\n/*\nThe root formatic component.\n\nThe root formatic component is actually two components. The main component is\na controlled component where you must pass the value in with each render. This\nis actually wrapped in another component which allows you to use formatic as\nan uncontrolled component where it retains the state of the value. The wrapper\nis what is actually exported.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport _ from './undash';\nimport utils from './utils';\nimport defaultConfigPlugin from './default-config';\n\nimport ClickOutsideMixin from './mixins/click-outside.js';\nimport FieldMixin from './mixins/field.js';\nimport HelperMixin from './mixins/helper.js';\nimport ResizeMixin from './mixins/resize.js';\nimport ScrollMixin from './mixins/scroll.js';\nimport UndoStackMixin from './mixins/undo-stack.js';\n\nimport bootstrapPlugin from './plugins/bootstrap';\nimport cssPlugin from './plugins/css-plugin';\nimport elementClassesPlugin from './plugins/element-classes';\nimport helpTextPlacementPlugin from './plugins/help-text-placement';\nimport metaPlugin from './plugins/meta';\nimport referencePlugin from './plugins/reference';\n\nexport { default as FieldContainer } from './components/field-container';\n\nexport {\n  bootstrapPlugin,\n  cssPlugin,\n  elementClassesPlugin,\n  helpTextPlacementPlugin,\n  metaPlugin,\n  referencePlugin,\n};\n\nexport {\n  ClickOutsideMixin,\n  FieldMixin,\n  HelperMixin,\n  ResizeMixin,\n  ScrollMixin,\n  UndoStackMixin,\n};\n\nconst createConfig = function(...args) {\n  const plugins = [defaultConfigPlugin].concat(args);\n\n  return plugins.reduce(function(config, plugin) {\n    if (_.isFunction(plugin)) {\n      const extensions = plugin(config);\n      if (extensions) {\n        _.extend(config, extensions);\n      }\n    } else {\n      _.extend(config, plugin);\n    }\n\n    return config;\n  }, {});\n};\n\nconst defaultConfig = createConfig();\n\n// The main formatic component that renders the form.\nconst FormaticControlledClass = createReactClass({\n  displayName: 'FormaticControlled',\n\n  // Respond to any value changes.\n  onChange: function(newValue, info) {\n    if (!this.props.onChange) {\n      return;\n    }\n    info = _.extend({}, info);\n    info.path = this.props.config.fieldValuePath(info.field);\n    this.props.onChange(newValue, info);\n  },\n\n  // Respond to any actions other than value changes. (For example, focus and\n  // blur.)\n  onAction: function(info) {\n    if (!this.props.onAction) {\n      return;\n    }\n    info = _.extend({}, info);\n    info.path = this.props.config.fieldValuePath(info.field);\n    this.props.onAction(info);\n  },\n\n  // Render the root component by delegating to the config.\n  render: function() {\n    const config = this.props.config;\n\n    return config.renderFormaticComponent(this);\n  },\n});\n\nconst FormaticControlled = React.createFactory(FormaticControlledClass);\n\n// A wrapper component that is actually exported and can allow formatic to be\n// used in an \"uncontrolled\" manner. (See uncontrolled components in the React\n// documentation for an explanation of the difference.)\nexport default createReactClass({\n  displayName: 'Formatic',\n\n  // Export some stuff as statics.\n  statics: {\n    createConfig,\n    availableMixins: {\n      clickOutside: ClickOutsideMixin,\n      field: FieldMixin,\n      helper: HelperMixin,\n      resize: ResizeMixin,\n      scroll: ScrollMixin,\n      undoStack: UndoStackMixin,\n    },\n    plugins: {\n      bootstrap: bootstrapPlugin,\n      meta: metaPlugin,\n      reference: referencePlugin,\n      elementClasses: elementClassesPlugin,\n      helpTextPlacement: helpTextPlacementPlugin,\n    },\n    utils,\n  },\n\n  // If we got a value, treat this component as controlled. Either way, retain\n  // the value in the state.\n  getInitialState: function() {\n    return {\n      isControlled: !_.isUndefined(this.props.value),\n      value: _.isUndefined(this.props.value)\n        ? this.props.defaultValue\n        : this.props.value,\n    };\n  },\n\n  // If this is a controlled component, change our state to reflect the new\n  // value. For uncontrolled components, ignore any value changes.\n  componentWillReceiveProps: function(newProps) {\n    if (this.state.isControlled) {\n      if (!_.isUndefined(newProps.value)) {\n        this.setState({\n          value: newProps.value,\n        });\n      }\n    }\n  },\n\n  // If this is an uncontrolled component, set our state to reflect the new\n  // value. Either way, call the onChange callback.\n  onChange: function(newValue, info) {\n    if (!this.state.isControlled) {\n      this.setState({\n        value: newValue,\n      });\n    }\n    if (!this.props.onChange) {\n      return;\n    }\n    this.props.onChange(newValue, info);\n  },\n\n  // Any actions should be sent to the generic onAction callback but also split\n  // into discreet callbacks per action.\n  onAction: function(info) {\n    if (this.props.onAction) {\n      this.props.onAction(info);\n    }\n    const action = utils.dashToPascal(info.action);\n    if (this.props['on' + action]) {\n      this.props['on' + action](info);\n    }\n  },\n\n  // Render the wrapper component (by just delegating to the main component).\n  render: function() {\n    const config = this.props.config || defaultConfig;\n    const value = this.state.value;\n\n    if (this.state.isControlled) {\n      if (!this.props.onChange) {\n        console.info(\n          'You should supply an onChange handler if you supply a value.'\n        );\n      }\n    }\n\n    const props = {\n      config,\n      // Allow field templates to be passed in as `field` or `fields`. After this, stop\n      // calling them fields.\n      fieldTemplate: this.props.field,\n      fieldTemplates: this.props.fields,\n      value,\n      onChange: this.onChange,\n      onAction: this.onAction,\n    };\n\n    _.each(this.props, function(propValue, key) {\n      if (!(key in props)) {\n        props[key] = propValue;\n      }\n    });\n\n    return FormaticControlled(props);\n  },\n});\n","import React from 'react';\n\nimport { argumentsToArray } from './utils';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default function jsx(type, props, children) {\n  let renderTag;\n  let metaProps;\n\n  if (typeof type === 'string' && props != null) {\n    const renderWith = props.renderWith;\n    if (renderWith != null) {\n      renderTag = renderWith.renderTag;\n      if (typeof renderTag != 'function') {\n        renderTag = null;\n      } else {\n        metaProps = renderWith.props || {};\n      }\n    }\n  }\n\n  if (!renderTag) {\n    return React.createElement.apply(null, arguments);\n  }\n\n  const tagProps = {};\n\n  let key;\n  for (key in props) {\n    if (hasOwnProperty.call(props, key) && key !== 'renderWith') {\n      tagProps[key] = props[key];\n    }\n  }\n\n  if (arguments.length < 4) {\n    return renderTag(type, tagProps, metaProps, children);\n  }\n\n  return renderTag.apply(\n    null,\n    argumentsToArray(arguments, 2, [type, tagProps, metaProps])\n  );\n}\n","// # click-outside mixin\n\n/*\nThere's no native React way to detect clicking outside an element. Sometimes\nthis is useful, so that's what this mixin does. To use it, mix it in and use it\nfrom your component like this:\n\n```js\nimport createReactClass from 'create-react-class';\n\nimport ClickOutsideMixin from '../../mixins/click-outside';\n\nexports default createReactClass({\n\n  mixins: [ClickOutsideMixin],\n\n  onClickOutside: function () {\n    console.log('clicked outside!');\n  },\n\n  componentDidMount: function () {\n    this.setOnClickOutside('myDiv', this.onClickOutside);\n  },\n\n  render: function () {\n    return React.DOM.div({ref: 'myDiv'},\n      'Hello!'\n    )\n  }\n});\n```\n*/\n\n'use strict';\n\nimport _ from '../undash';\n\nconst hasAncestor = function(child, parent) {\n  if (child.parentNode === parent) {\n    return true;\n  }\n  if (child.parentNode === null) {\n    return false;\n  }\n  return hasAncestor(child.parentNode, parent);\n};\n\nexport default {\n  isNodeOutside: function(nodeOut, nodeIn) {\n    if (nodeOut === nodeIn) {\n      return false;\n    }\n    if (hasAncestor(nodeOut, nodeIn)) {\n      return false;\n    }\n    return true;\n  },\n\n  isNodeInside: function(nodeIn, nodeOut) {\n    return !this.isNodeOutside(nodeIn, nodeOut);\n  },\n\n  _onClickMousedown: function() {\n    _.each(\n      this.clickOutsideHandlers,\n      function(funcs, ref) {\n        if (this[`${ref}Ref`]) {\n          this._mousedownRefs[ref] = true;\n        }\n      }.bind(this)\n    );\n  },\n\n  _onClickMouseup: function(event) {\n    _.each(\n      this.clickOutsideHandlers,\n      function(funcs, ref) {\n        if (this[`${ref}Ref`] && this._mousedownRefs[ref]) {\n          if (this.isNodeOutside(event.target, this[`${ref}Ref`])) {\n            funcs.forEach(\n              function(fn) {\n                fn.call(this, event);\n              }.bind(this)\n            );\n          }\n        }\n        this._mousedownRefs[ref] = false;\n      }.bind(this)\n    );\n  },\n\n  setOnClickOutside: function(ref, fn) {\n    if (!this.clickOutsideHandlers[ref]) {\n      this.clickOutsideHandlers[ref] = [];\n    }\n    this.clickOutsideHandlers[ref].push(fn);\n  },\n\n  componentDidMount: function() {\n    this.clickOutsideHandlers = {};\n    this._didMouseDown = false;\n    document.addEventListener('mousedown', this._onClickMousedown);\n    document.addEventListener('mouseup', this._onClickMouseup);\n    //document.addEventListener('click', this._onClickDocument);\n    this._mousedownRefs = {};\n  },\n\n  componentWillUnmount: function() {\n    this.clickOutsideHandlers = {};\n    //document.removeEventListener('click', this._onClickDocument);\n    document.removeEventListener('mouseup', this._onClickMouseup);\n    document.removeEventListener('mousedown', this._onClickMousedown);\n  },\n};\n","// # resize mixin\n\n/*\nYou'd think it would be pretty easy to detect when a DOM element is resized.\nAnd you'd be wrong. There are various tricks, but none of them work very well.\nSo, using good ol' polling here. To try to be as efficient as possible, there\nis only a single setInterval used for all elements. To use:\n\n```js\nimport createReactClass from 'create-react-class';\n\nimport ResizeMixin from '../../mixins/resize';\n\nexport default createReactClass({\n\n  mixins: [ResizeMixin],\n\n  onResize: function () {\n    console.log('resized!');\n  },\n\n  componentDidMount: function () {\n    this.setOnResize('myText', this.onResize);\n  },\n\n  onChange: function () {\n    ...\n  },\n\n  render: function () {\n    return React.DOM.textarea({ref: 'myText', value: this.props.value, onChange: ...})\n  }\n});\n```\n*/\n\n'use strict';\n\nlet id = 0;\n\nconst resizeIntervalElements = {};\nlet resizeIntervalElementsCount = 0;\nlet resizeIntervalTimer = null;\n\nconst checkElements = function() {\n  Object.keys(resizeIntervalElements).forEach(function(key) {\n    const element = resizeIntervalElements[key];\n    if (\n      element.clientWidth !== element.__prevClientWidth ||\n      element.clientHeight !== element.__prevClientHeight\n    ) {\n      element.__prevClientWidth = element.clientWidth;\n      element.__prevClientHeight = element.clientHeight;\n      const handlers = element.__resizeHandlers;\n      handlers.forEach(function(handler) {\n        handler();\n      });\n    }\n  }, 100);\n};\n\nconst addResizeIntervalHandler = function(element, fn) {\n  if (resizeIntervalTimer === null) {\n    resizeIntervalTimer = setInterval(checkElements, 100);\n  }\n  if (!('__resizeId' in element)) {\n    id++;\n    element.__prevClientWidth = element.clientWidth;\n    element.__prevClientHeight = element.clientHeight;\n    element.__resizeId = id;\n    resizeIntervalElementsCount++;\n    resizeIntervalElements[id] = element;\n    element.__resizeHandlers = [];\n  }\n  element.__resizeHandlers.push(fn);\n};\n\nconst removeResizeIntervalHandlers = function(element) {\n  if (!('__resizeId' in element)) {\n    return;\n  }\n  const resizeId = element.__resizeId;\n  delete element.__resizeId;\n  delete element.__resizeHandlers;\n  delete resizeIntervalElements[resizeId];\n  resizeIntervalElementsCount--;\n  if (resizeIntervalElementsCount < 1) {\n    clearInterval(resizeIntervalTimer);\n    resizeIntervalTimer = null;\n  }\n};\n\nconst onResize = function(ref, fn) {\n  fn(ref);\n};\n\nexport default {\n  componentDidMount: function() {\n    if (this.onResizeWindow) {\n      window.addEventListener('resize', this.onResizeWindow);\n    }\n    this.resizeElementRefs = {};\n  },\n\n  componentWillUnmount: function() {\n    if (this.onResizeWindow) {\n      window.removeEventListener('resize', this.onResizeWindow);\n    }\n    Object.keys(this.resizeElementRefs).forEach(\n      function(ref) {\n        removeResizeIntervalHandlers(this[`${ref}Ref`]);\n      }.bind(this)\n    );\n  },\n\n  setOnResize: function(ref, fn) {\n    if (!this.resizeElementRefs[ref]) {\n      this.resizeElementRefs[ref] = true;\n    }\n    addResizeIntervalHandler(this[`${ref}Ref`], onResize.bind(this, ref, fn));\n  },\n};\n","import _ from '../undash';\n\nexport default {\n  // Start an action bubbling up through parent components.\n  onStartAction: function(action, props) {\n    if (this.props.onAction) {\n      const info = _.extend({}, props);\n      info.action = action;\n      info.field = this.props.field;\n      this.props.onAction(info);\n    }\n  },\n\n  // Bubble up an action.\n  onBubbleAction: function(info) {\n    if (this.props.onAction) {\n      this.props.onAction(info);\n    }\n  },\n\n  onFocusAction: function() {\n    this.onStartAction('focus');\n  },\n\n  onBlurAction: function() {\n    this.onStartAction('blur');\n  },\n\n  isReadOnly: function() {\n    return this.props.config.fieldIsReadOnly(this.props.field);\n  },\n\n  renderWith: function(elementName, extraProps) {\n    const { config, field, typeName, parentTypeName } = this.props;\n    const props = {\n      field,\n      elementName,\n    };\n    if (extraProps) {\n      _.extend(props, extraProps);\n    }\n    if (typeName) {\n      props.typeName = typeName;\n    } else if (parentTypeName) {\n      props.parentTypeName = parentTypeName;\n    } else {\n      props.typeName = this.constructor.displayName;\n    }\n    return {\n      renderTag: config.renderTag,\n      props,\n    };\n  },\n};\n","// # bootstrap plugin\n\n/*\nThe bootstrap plugin sneaks in some classes to elements so that it plays well\nwith Twitter Bootstrap.\n*/\n\n'use strict';\n\nimport _ from '../undash';\n\n// Declare some classes and labels for each element.\nconst modifiers = {\n  Field: { classes: { 'form-group': true } },\n  Help: { classes: { 'help-block': true } },\n  Sample: { classes: { 'help-block': true } },\n  ArrayControl: { classes: { 'form-inline': true } },\n  ArrayItem: { classes: { well: true } },\n  AssocListItem: { classes: { well: true } },\n  FieldTemplateChoices: { classes: { 'form-control': true } },\n  AddItem: { classes: { 'glyphicon glyphicon-plus': true }, label: '' },\n  RemoveItem: { classes: { 'glyphicon glyphicon-remove': true }, label: '' },\n  MoveItemBack: {\n    classes: { 'glyphicon glyphicon-arrow-up': true },\n    label: '',\n  },\n  MoveItemForward: {\n    classes: { 'glyphicon glyphicon-arrow-down': true },\n    label: '',\n  },\n  AssocListItemKey: { classes: { 'form-control': true } },\n\n  SingleLineString: { classes: { 'form-control': true } },\n  String: { classes: { 'form-control': true } },\n  PrettyText: { classes: { 'form-control': true } },\n  Json: { classes: { 'form-control': true } },\n  SelectValue: { classes: { 'form-control': true } },\n};\n\nexport default function(config) {\n  const createElement = config.createElement;\n\n  return {\n    createElement: function(name, props, children) {\n      name = config.elementName(name);\n\n      const modifier = modifiers[name];\n\n      if (modifier) {\n        // If there is a modifier for this element, add the classes and label.\n        props = _.extend({}, props);\n        props.classes = _.extend({}, props.classes, modifier.classes);\n        if ('label' in modifier) {\n          props.label = modifier.label;\n        }\n      }\n\n      return createElement(name, props, children);\n    },\n  };\n}\n","// # element-classes plugin\n\n/*\nThis plugins provides a config method addElementClass that lets you add on a\nclass to an element.\n*/\n\n'use strict';\n\nimport _ from '../undash';\n\nexport default function(config) {\n  const createElement = config.createElement;\n\n  const elementClasses = {};\n\n  return {\n    addElementClass: function(name, className) {\n      name = config.elementName(name);\n\n      if (!elementClasses[name]) {\n        elementClasses[name] = {};\n      }\n\n      elementClasses[name][className] = true;\n    },\n\n    // Wrap the createElement method.\n    createElement: function(name, props, children) {\n      name = config.elementName(name);\n\n      if (elementClasses[name]) {\n        props = _.extend({}, props, { classes: elementClasses[name] });\n      }\n\n      return createElement(name, props, children);\n    },\n  };\n}\n","// # reference plugin\n\n/*\nThis plugin allows fields to be strings and reference other fields by key or\nid. It also allows a field to extend another field with\nextends: ['foo', 'bar'] where 'foo' and 'bar' refer to other keys or ids.\n*/\n\n'use strict';\n\nimport _ from '../undash';\n\nexport default function(config) {\n  const initField = config.initField;\n\n  return {\n    // Look for a template in this field or any of its parents.\n    findFieldTemplate: function(field, name) {\n      if (field.templates[name]) {\n        return field.templates[name];\n      }\n\n      if (field.parent) {\n        return config.findFieldTemplate(field.parent, name);\n      }\n\n      return null;\n    },\n\n    // Inherit from any field templates that this field template\n    // extends.\n    resolveFieldTemplate: function(field, fieldTemplate) {\n      if (!fieldTemplate.extends) {\n        return fieldTemplate;\n      }\n\n      let ext = fieldTemplate.extends;\n\n      if (!_.isArray(ext)) {\n        ext = [ext];\n      }\n\n      const bases = ext.map(function(base) {\n        const template = config.findFieldTemplate(field, base);\n        if (!template) {\n          throw new Error('Template ' + base + ' not found.');\n        }\n        return template;\n      });\n\n      const chain = [{}].concat(bases.reverse().concat([fieldTemplate]));\n      fieldTemplate = _.extend.apply(_, chain);\n\n      return fieldTemplate;\n    },\n\n    // Wrap the initField method.\n    initField: function(field) {\n      const templates = (field.templates = {});\n\n      const childFieldTemplates = config.fieldChildFieldTemplates(field);\n\n      // Add each of the child field templates to our template map.\n      childFieldTemplates.forEach(function(fieldTemplate) {\n        if (_.isString(fieldTemplate)) {\n          return;\n        }\n\n        const key = fieldTemplate.key;\n        const id = fieldTemplate.id;\n\n        if (fieldTemplate.template) {\n          fieldTemplate = _.extend({}, fieldTemplate, { template: false });\n        }\n\n        if (!_.isUndefined(key) && key !== '') {\n          templates[key] = fieldTemplate;\n        }\n\n        if (!_.isUndefined(id) && id !== '') {\n          templates[id] = fieldTemplate;\n        }\n      });\n\n      // Resolve any references to other field templates.\n      if (childFieldTemplates.length > 0) {\n        field.fields = childFieldTemplates.map(function(fieldTemplate) {\n          if (_.isString(fieldTemplate)) {\n            fieldTemplate = config.findFieldTemplate(field, fieldTemplate);\n          }\n\n          return config.resolveFieldTemplate(field, fieldTemplate);\n        });\n\n        field.fields = field.fields.filter(function(fieldTemplate) {\n          return !fieldTemplate.template;\n        });\n      }\n\n      const itemFieldTemplates = config.fieldItemFieldTemplates(field);\n\n      // Resolve any of our item field templates. (Field templates for dynamic\n      // child fields.)\n      if (itemFieldTemplates.length > 0) {\n        field.itemFields = itemFieldTemplates.map(function(itemFieldTemplate) {\n          if (_.isString(itemFieldTemplate)) {\n            itemFieldTemplate = config.findFieldTemplate(\n              field,\n              itemFieldTemplate\n            );\n          }\n\n          return config.resolveFieldTemplate(field, itemFieldTemplate);\n        });\n      }\n\n      initField(field);\n    },\n  };\n}\n","// # utils\n\n/*\nJust some shared utility functions.\n*/\n\n'use strict';\n\nimport _ from './undash';\nimport ReactDOM from 'react-dom';\n\nconst utils = {};\n\n// Copy obj recursing deeply.\nutils.deepCopy = function(obj) {\n  if (_.isArray(obj)) {\n    return obj.map(function(item) {\n      return utils.deepCopy(item);\n    });\n  } else if (_.isFunction(obj)) {\n    return obj;\n  } else if (_.isNull(obj)) {\n    return obj;\n  } else if (_.isObject(obj)) {\n    const copy = {};\n    _.each(obj, function(value, key) {\n      copy[key] = utils.deepCopy(value);\n    });\n    return copy;\n  } else {\n    return obj;\n  }\n};\n\n// Cache for strings converted to Pascal Case. This should be a finite list, so\n// not much fear that we will run out of memory.\nconst dashToPascalCache = {};\n\n// Convert foo-bar to FooBar.\nutils.dashToPascal = function(s) {\n  if (s === '') {\n    return '';\n  }\n  if (!dashToPascalCache[s]) {\n    dashToPascalCache[s] = s\n      .split('-')\n      .map(function(part) {\n        return part[0].toUpperCase() + part.substring(1);\n      })\n      .join('');\n  }\n  return dashToPascalCache[s];\n};\n\n// Copy all computed styles from one DOM element to another.\nutils.copyElementStyle = function(fromElement, toElement) {\n  const fromStyle = window.getComputedStyle(fromElement, '');\n\n  if (fromStyle.cssText !== '') {\n    toElement.style.cssText = fromStyle.cssText;\n    return;\n  }\n\n  const cssRules = [];\n  for (let i = 0; i < fromStyle.length; i++) {\n    cssRules.push(\n      fromStyle[i] + ':' + fromStyle.getPropertyValue(fromStyle[i]) + ';'\n    );\n  }\n  const cssText = cssRules.join('');\n\n  toElement.style.cssText = cssText;\n};\n\n// Object to hold browser sniffing info.\nconst browser = {\n  isChrome: false,\n  isMozilla: false,\n  isOpera: false,\n  isIe: false,\n  isSafari: false,\n  isUnknown: false,\n};\n\n// Sniff the browser.\nlet ua = '';\n\nif (typeof navigator !== 'undefined') {\n  ua = navigator.userAgent;\n}\n\nif (ua.indexOf('Chrome') > -1) {\n  browser.isChrome = true;\n} else if (ua.indexOf('Safari') > -1) {\n  browser.isSafari = true;\n} else if (ua.indexOf('Opera') > -1) {\n  browser.isOpera = true;\n} else if (ua.indexOf('Firefox') > -1) {\n  browser.isMozilla = true;\n} else if (ua.indexOf('MSIE') > -1) {\n  browser.isIe = true;\n} else {\n  browser.isUnknown = true;\n}\n\n// Export sniffed browser info.\nutils.browser = browser;\n\n// Create a method that delegates to another method on the same object. The\n// default configuration uses this function to delegate one method to another.\nutils.delegateTo = function(name) {\n  return function() {\n    return this[name].apply(this, arguments);\n  };\n};\n\nutils.delegator = function(obj) {\n  return function(name) {\n    return function() {\n      return obj[name].apply(obj, arguments);\n    };\n  };\n};\n\nutils.capitalize = function(s) {\n  return s.charAt(0).toUpperCase() + s.substring(1).toLowerCase();\n};\n\nexport const keyCodes = (utils.keyCodes = {\n  UP: 38,\n  DOWN: 40,\n  ENTER: 13,\n  ESC: 27,\n  '[': 219,\n  SHIFT: 16,\n});\n\n// utils.scrollIntoViewIfOutside = (node, container) => {\n//   if (node && container) {\n//     const nodeRect = node.getBoundingClientRect();\n//     const containerRect = container.getBoundingClientRect();\n//     if (nodeRect.bottom > containerRect.bottom || nodeRect.top < containerRect.top) {\n//       node.scrollIntoView(false);\n//     }\n//   }\n// };\n\nexport const scrollIntoContainerView = (utils.scrollIntoContainerView = (\n  node,\n  container\n) => {\n  if (node && container) {\n    const nodeRect = node.getBoundingClientRect();\n    const containerRect = container.getBoundingClientRect();\n    let offset = 0;\n    if (nodeRect.bottom > containerRect.bottom) {\n      offset = nodeRect.bottom - containerRect.bottom;\n    } else if (nodeRect.top < containerRect.top) {\n      offset = nodeRect.top - containerRect.top;\n    }\n    if (offset !== 0) {\n      container.scrollTop = container.scrollTop + offset;\n    }\n  }\n});\n\nexport const focusRefNode = (utils.focusRefNode = ref => {\n  if (ref) {\n    const node = ReactDOM.findDOMNode(ref);\n    node.focus();\n  }\n});\n\nexport const ref = (utils.ref = (component, key) => node => {\n  component[`${key}Ref`] = node;\n});\n\nexport const argumentsToArray = (args, startIndex = 0, array) => {\n  if (!array) {\n    array = [];\n  }\n  const insertIndex = array.length;\n  const argsLengthToGet = args.length - startIndex;\n\n  for (let i = 0; i < argsLengthToGet; i++) {\n    array[i + insertIndex] = args[i + startIndex];\n  }\n  return array;\n};\n\nexport default utils;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAAA;AAGA;AACA;AADA;AAAA;AAGA;AACA;AADA;AAAA;AAdA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAWA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AALA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AAJA;AAQA;AACA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAtCA;AACA;AAwCA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAZA;AACA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AAAA;AAAA;AACA;AADA;AAZA;AAiBA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAIA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AADA;AAIA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AADA;AAIA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AADA;AAIA;AADA;AAKA;AAAA;AAAA;AAIA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AADA;AAvFA;AACA;AA6FA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAEA;AADA;AAGA;AAHA;AADA;AAQA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAOA;AAAA;AAAA;AADA;AAOA;AAEA;AADA;AAGA;AAHA;AADA;AApCA;AAFA;AACA;AAkDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1KA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAhBA;AAsBA;AACA;AAAA;AAAA;AADA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAFA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA,6BAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AALA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AADA;AAIA;AADA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAIA;AADA;AA3BA;AACA;AAiCA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAFA;AAOA;AAAA;AAEA;AAEA;AAAA;AAFA;AAZA;AACA;AAqBA;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AAEA;AAEA;AACA,gCAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAQA;AAAA;AAAA;AAOA;AAAA;AAQA;AAAA;AA/CA;AACA;AAsDA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AAEA;AAGA;AACA;AACA;AACA;AAAA;;;;;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAAA;AACA;AAIA;;;;AAzBA;AACA;AA2BA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAGA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AASA;AA9JA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAIA;AACA;AACA;AACA;AAHA;AAMA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAQA;AA5IA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAjCA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAIA;AACA;AAFA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAOA;AAGA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAQA;AAtHA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAnDA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;;;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAHA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AArBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAjIA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAHA;AAQA;AAnBA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAGA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AASA;AAtFA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAhFA;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAhFA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AAtFA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAvCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AAlCA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAvDA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;;;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAfA;AAkBA;AACA;AAtCA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAxCA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AA3CA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AApCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AApBA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AApCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAFA;AAOA;AA3DA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AAEA;AACA;AAFA;AAIA;AAAA;AAOA;AAzEA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAOA;AA7BA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAAA;AAKA;AA1DA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAHA;AAOA;AAtDA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAHA;AAOA;AAEA;AACA;AAFA;AAOA;AAnCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AA9BA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAFA;AAOA;AAhCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAEA;AACA;AAFA;AASA;AAtDA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAOA;AAnBA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AADA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AAHA;AASA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAnCA;AA8CA;AAhFA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAtBA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AASA;AA5BA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAHA;AACA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAJA;AAaeA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAKA;AAGA;AACA;AACA;AACA;AACA;AALA;AAWA;AAIA;AApfA;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAHA;AADA;AAWA;AArCA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAKA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAiBA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAhGA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AAAA;AAEA;AArBA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AAxBA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAOA;AAtDA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAfA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAfA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AASA;AA1BA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AASA;AA1BA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAlBA;AAoBA;AAxCA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAMA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AAXA;AAcA;AACA;AACA;AAHA;AASA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzXA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AA/BA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;AAUA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AATA;AAYA;AACA;AACA;AAEA;AACA;AANA;AAOA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAHA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AATA;AAeA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AApiBA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AA9DA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAFA;AAKA;AAxBA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAFA;AAOA;AApBA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;;;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AAHA;AADA;AAWA;AACA;AACA;AACA;AAtFA;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;AAaA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;;;;;;AAIA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAhBA;AAkBA;AACA;AACA;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAMA;AACA;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AAIA;AAEA;AAEA;AAEA;AAIA;AAIA;AAEA;AAEA;AAIA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AAEA;AAEA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AAEA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AA7qCA;AA+qCA;;;;;;;;;;;;AC3vCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA7BA;AAgCA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAjBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGA;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAjEA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAxBA;;;;;;;;;;;;AChGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAlDA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA2BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AACA;AACA;;;;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAsBA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AACA;AACA;;;;;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtGA;AAwGA;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;A","sourceRoot":""}